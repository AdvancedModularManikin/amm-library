// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file AMM_Standard.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _AMM_AMM_STANDARD_H_
#define _AMM_AMM_STANDARD_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(AMM_Standard_SOURCE)
#define AMM_Standard_DllAPI __declspec( dllexport )
#else
#define AMM_Standard_DllAPI __declspec( dllimport )
#endif // AMM_Standard_SOURCE
#else
#define AMM_Standard_DllAPI
#endif
#else
#define AMM_Standard_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace AMM
{
    /*!
     * @brief This class represents the structure FMA_Location defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class FMA_Location
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport FMA_Location();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~FMA_Location();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::FMA_Location that will be copied.
         */
        eProsima_user_DllExport FMA_Location(const FMA_Location &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::FMA_Location that will be copied.
         */
        eProsima_user_DllExport FMA_Location(FMA_Location &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::FMA_Location that will be copied.
         */
        eProsima_user_DllExport FMA_Location& operator=(const FMA_Location &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::FMA_Location that will be copied.
         */
        eProsima_user_DllExport FMA_Location& operator=(FMA_Location &&x);

        /*!
         * @brief This function sets a value in member FMAID
         * @param _FMAID New value for member FMAID
         */
        inline eProsima_user_DllExport void FMAID(int32_t _FMAID)
        {
            m_FMAID = _FMAID;
        }

        /*!
         * @brief This function returns the value of member FMAID
         * @return Value of member FMAID
         */
        inline eProsima_user_DllExport int32_t FMAID() const
        {
            return m_FMAID;
        }

        /*!
         * @brief This function returns a reference to member FMAID
         * @return Reference to member FMAID
         */
        inline eProsima_user_DllExport int32_t& FMAID()
        {
            return m_FMAID;
        }
        /*!
         * @brief This function copies the value in member description
         * @param _description New value to be copied in member description
         */
        inline eProsima_user_DllExport void description(const std::string &_description)
        {
            m_description = _description;
        }

        /*!
         * @brief This function moves the value in member description
         * @param _description New value to be moved in member description
         */
        inline eProsima_user_DllExport void description(std::string &&_description)
        {
            m_description = std::move(_description);
        }

        /*!
         * @brief This function returns a constant reference to member description
         * @return Constant reference to member description
         */
        inline eProsima_user_DllExport const std::string& description() const
        {
            return m_description;
        }

        /*!
         * @brief This function returns a reference to member description
         * @return Reference to member description
         */
        inline eProsima_user_DllExport std::string& description()
        {
            return m_description;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::FMA_Location& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        int32_t m_FMAID;
        std::string m_description;
    };
    /*!
     * @brief This class represents the structure UUID defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class UUID
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport UUID();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~UUID();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::UUID that will be copied.
         */
        eProsima_user_DllExport UUID(const UUID &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::UUID that will be copied.
         */
        eProsima_user_DllExport UUID(UUID &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::UUID that will be copied.
         */
        eProsima_user_DllExport UUID& operator=(const UUID &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::UUID that will be copied.
         */
        eProsima_user_DllExport UUID& operator=(UUID &&x);

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        inline eProsima_user_DllExport void id(const std::string &_id)
        {
            m_id = _id;
        }

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        inline eProsima_user_DllExport void id(std::string &&_id)
        {
            m_id = std::move(_id);
        }

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        inline eProsima_user_DllExport const std::string& id() const
        {
            return m_id;
        }

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        inline eProsima_user_DllExport std::string& id()
        {
            return m_id;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::UUID& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        std::string m_id;
    };
    /*!
     * @brief This class represents the enumeration AssessmentValue defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    enum AssessmentValue : uint32_t
    {
        OMISSION_ERROR,
        COMMISSION_ERROR,
        EXECUTION_ERROR,
        SUCCESS
    };
    /*!
     * @brief This class represents the structure Assessment defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class Assessment
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Assessment();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Assessment();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::Assessment that will be copied.
         */
        eProsima_user_DllExport Assessment(const Assessment &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::Assessment that will be copied.
         */
        eProsima_user_DllExport Assessment(Assessment &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::Assessment that will be copied.
         */
        eProsima_user_DllExport Assessment& operator=(const Assessment &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::Assessment that will be copied.
         */
        eProsima_user_DllExport Assessment& operator=(Assessment &&x);

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        inline eProsima_user_DllExport void id(const AMM::UUID &_id)
        {
            m_id = _id;
        }

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        inline eProsima_user_DllExport void id(AMM::UUID &&_id)
        {
            m_id = std::move(_id);
        }

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        inline eProsima_user_DllExport const AMM::UUID& id() const
        {
            return m_id;
        }

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        inline eProsima_user_DllExport AMM::UUID& id()
        {
            return m_id;
        }
        /*!
         * @brief This function copies the value in member event_id
         * @param _event_id New value to be copied in member event_id
         */
        inline eProsima_user_DllExport void event_id(const AMM::UUID &_event_id)
        {
            m_event_id = _event_id;
        }

        /*!
         * @brief This function moves the value in member event_id
         * @param _event_id New value to be moved in member event_id
         */
        inline eProsima_user_DllExport void event_id(AMM::UUID &&_event_id)
        {
            m_event_id = std::move(_event_id);
        }

        /*!
         * @brief This function returns a constant reference to member event_id
         * @return Constant reference to member event_id
         */
        inline eProsima_user_DllExport const AMM::UUID& event_id() const
        {
            return m_event_id;
        }

        /*!
         * @brief This function returns a reference to member event_id
         * @return Reference to member event_id
         */
        inline eProsima_user_DllExport AMM::UUID& event_id()
        {
            return m_event_id;
        }
        /*!
         * @brief This function sets a value in member value
         * @param _value New value for member value
         */
        inline eProsima_user_DllExport void value(AMM::AssessmentValue _value)
        {
            m_value = _value;
        }

        /*!
         * @brief This function returns the value of member value
         * @return Value of member value
         */
        inline eProsima_user_DllExport AMM::AssessmentValue value() const
        {
            return m_value;
        }

        /*!
         * @brief This function returns a reference to member value
         * @return Reference to member value
         */
        inline eProsima_user_DllExport AMM::AssessmentValue& value()
        {
            return m_value;
        }
        /*!
         * @brief This function copies the value in member comment
         * @param _comment New value to be copied in member comment
         */
        inline eProsima_user_DllExport void comment(const std::string &_comment)
        {
            m_comment = _comment;
        }

        /*!
         * @brief This function moves the value in member comment
         * @param _comment New value to be moved in member comment
         */
        inline eProsima_user_DllExport void comment(std::string &&_comment)
        {
            m_comment = std::move(_comment);
        }

        /*!
         * @brief This function returns a constant reference to member comment
         * @return Constant reference to member comment
         */
        inline eProsima_user_DllExport const std::string& comment() const
        {
            return m_comment;
        }

        /*!
         * @brief This function returns a reference to member comment
         * @return Reference to member comment
         */
        inline eProsima_user_DllExport std::string& comment()
        {
            return m_comment;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Assessment& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        AMM::UUID m_id;
        AMM::UUID m_event_id;
        AMM::AssessmentValue m_value;
        std::string m_comment;
    };
    /*!
     * @brief This class represents the structure EventFragment defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class EventFragment
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport EventFragment();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~EventFragment();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::EventFragment that will be copied.
         */
        eProsima_user_DllExport EventFragment(const EventFragment &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::EventFragment that will be copied.
         */
        eProsima_user_DllExport EventFragment(EventFragment &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::EventFragment that will be copied.
         */
        eProsima_user_DllExport EventFragment& operator=(const EventFragment &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::EventFragment that will be copied.
         */
        eProsima_user_DllExport EventFragment& operator=(EventFragment &&x);

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        inline eProsima_user_DllExport void id(const AMM::UUID &_id)
        {
            m_id = _id;
        }

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        inline eProsima_user_DllExport void id(AMM::UUID &&_id)
        {
            m_id = std::move(_id);
        }

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        inline eProsima_user_DllExport const AMM::UUID& id() const
        {
            return m_id;
        }

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        inline eProsima_user_DllExport AMM::UUID& id()
        {
            return m_id;
        }
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
        {
            m_timestamp = _timestamp;
        }

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        inline eProsima_user_DllExport uint64_t timestamp() const
        {
            return m_timestamp;
        }

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        inline eProsima_user_DllExport uint64_t& timestamp()
        {
            return m_timestamp;
        }
        /*!
         * @brief This function copies the value in member location
         * @param _location New value to be copied in member location
         */
        inline eProsima_user_DllExport void location(const AMM::FMA_Location &_location)
        {
            m_location = _location;
        }

        /*!
         * @brief This function moves the value in member location
         * @param _location New value to be moved in member location
         */
        inline eProsima_user_DllExport void location(AMM::FMA_Location &&_location)
        {
            m_location = std::move(_location);
        }

        /*!
         * @brief This function returns a constant reference to member location
         * @return Constant reference to member location
         */
        inline eProsima_user_DllExport const AMM::FMA_Location& location() const
        {
            return m_location;
        }

        /*!
         * @brief This function returns a reference to member location
         * @return Reference to member location
         */
        inline eProsima_user_DllExport AMM::FMA_Location& location()
        {
            return m_location;
        }
        /*!
         * @brief This function copies the value in member practitioner
         * @param _practitioner New value to be copied in member practitioner
         */
        inline eProsima_user_DllExport void practitioner(const std::string &_practitioner)
        {
            m_practitioner = _practitioner;
        }

        /*!
         * @brief This function moves the value in member practitioner
         * @param _practitioner New value to be moved in member practitioner
         */
        inline eProsima_user_DllExport void practitioner(std::string &&_practitioner)
        {
            m_practitioner = std::move(_practitioner);
        }

        /*!
         * @brief This function returns a constant reference to member practitioner
         * @return Constant reference to member practitioner
         */
        inline eProsima_user_DllExport const std::string& practitioner() const
        {
            return m_practitioner;
        }

        /*!
         * @brief This function returns a reference to member practitioner
         * @return Reference to member practitioner
         */
        inline eProsima_user_DllExport std::string& practitioner()
        {
            return m_practitioner;
        }
        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        inline eProsima_user_DllExport void type(const std::string &_type)
        {
            m_type = _type;
        }

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        inline eProsima_user_DllExport void type(std::string &&_type)
        {
            m_type = std::move(_type);
        }

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        inline eProsima_user_DllExport const std::string& type() const
        {
            return m_type;
        }

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        inline eProsima_user_DllExport std::string& type()
        {
            return m_type;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::string &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::string &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::string& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::string& data()
        {
            return m_data;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::EventFragment& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        AMM::UUID m_id;
        uint64_t m_timestamp;
        AMM::FMA_Location m_location;
        std::string m_practitioner;
        std::string m_type;
        std::string m_data;
    };
    /*!
     * @brief This class represents the structure EventRecord defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class EventRecord
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport EventRecord();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~EventRecord();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::EventRecord that will be copied.
         */
        eProsima_user_DllExport EventRecord(const EventRecord &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::EventRecord that will be copied.
         */
        eProsima_user_DllExport EventRecord(EventRecord &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::EventRecord that will be copied.
         */
        eProsima_user_DllExport EventRecord& operator=(const EventRecord &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::EventRecord that will be copied.
         */
        eProsima_user_DllExport EventRecord& operator=(EventRecord &&x);

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        inline eProsima_user_DllExport void id(const AMM::UUID &_id)
        {
            m_id = _id;
        }

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        inline eProsima_user_DllExport void id(AMM::UUID &&_id)
        {
            m_id = std::move(_id);
        }

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        inline eProsima_user_DllExport const AMM::UUID& id() const
        {
            return m_id;
        }

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        inline eProsima_user_DllExport AMM::UUID& id()
        {
            return m_id;
        }
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
        {
            m_timestamp = _timestamp;
        }

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        inline eProsima_user_DllExport uint64_t timestamp() const
        {
            return m_timestamp;
        }

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        inline eProsima_user_DllExport uint64_t& timestamp()
        {
            return m_timestamp;
        }
        /*!
         * @brief This function copies the value in member location
         * @param _location New value to be copied in member location
         */
        inline eProsima_user_DllExport void location(const AMM::FMA_Location &_location)
        {
            m_location = _location;
        }

        /*!
         * @brief This function moves the value in member location
         * @param _location New value to be moved in member location
         */
        inline eProsima_user_DllExport void location(AMM::FMA_Location &&_location)
        {
            m_location = std::move(_location);
        }

        /*!
         * @brief This function returns a constant reference to member location
         * @return Constant reference to member location
         */
        inline eProsima_user_DllExport const AMM::FMA_Location& location() const
        {
            return m_location;
        }

        /*!
         * @brief This function returns a reference to member location
         * @return Reference to member location
         */
        inline eProsima_user_DllExport AMM::FMA_Location& location()
        {
            return m_location;
        }
        /*!
         * @brief This function copies the value in member practitioner
         * @param _practitioner New value to be copied in member practitioner
         */
        inline eProsima_user_DllExport void practitioner(const std::string &_practitioner)
        {
            m_practitioner = _practitioner;
        }

        /*!
         * @brief This function moves the value in member practitioner
         * @param _practitioner New value to be moved in member practitioner
         */
        inline eProsima_user_DllExport void practitioner(std::string &&_practitioner)
        {
            m_practitioner = std::move(_practitioner);
        }

        /*!
         * @brief This function returns a constant reference to member practitioner
         * @return Constant reference to member practitioner
         */
        inline eProsima_user_DllExport const std::string& practitioner() const
        {
            return m_practitioner;
        }

        /*!
         * @brief This function returns a reference to member practitioner
         * @return Reference to member practitioner
         */
        inline eProsima_user_DllExport std::string& practitioner()
        {
            return m_practitioner;
        }
        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        inline eProsima_user_DllExport void type(const std::string &_type)
        {
            m_type = _type;
        }

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        inline eProsima_user_DllExport void type(std::string &&_type)
        {
            m_type = std::move(_type);
        }

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        inline eProsima_user_DllExport const std::string& type() const
        {
            return m_type;
        }

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        inline eProsima_user_DllExport std::string& type()
        {
            return m_type;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::string &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::string &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::string& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::string& data()
        {
            return m_data;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::EventRecord& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        AMM::UUID m_id;
        uint64_t m_timestamp;
        AMM::FMA_Location m_location;
        std::string m_practitioner;
        std::string m_type;
        std::string m_data;
    };
    /*!
     * @brief This class represents the enumeration FAR_Status defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    enum FAR_Status : uint32_t
    {
        REQUESTING,
        ACCEPTED,
        DENIED
    };
    /*!
     * @brief This class represents the structure FragmentAmendmentRequest defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class FragmentAmendmentRequest
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport FragmentAmendmentRequest();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~FragmentAmendmentRequest();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::FragmentAmendmentRequest that will be copied.
         */
        eProsima_user_DllExport FragmentAmendmentRequest(const FragmentAmendmentRequest &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::FragmentAmendmentRequest that will be copied.
         */
        eProsima_user_DllExport FragmentAmendmentRequest(FragmentAmendmentRequest &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::FragmentAmendmentRequest that will be copied.
         */
        eProsima_user_DllExport FragmentAmendmentRequest& operator=(const FragmentAmendmentRequest &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::FragmentAmendmentRequest that will be copied.
         */
        eProsima_user_DllExport FragmentAmendmentRequest& operator=(FragmentAmendmentRequest &&x);

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        inline eProsima_user_DllExport void id(const AMM::UUID &_id)
        {
            m_id = _id;
        }

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        inline eProsima_user_DllExport void id(AMM::UUID &&_id)
        {
            m_id = std::move(_id);
        }

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        inline eProsima_user_DllExport const AMM::UUID& id() const
        {
            return m_id;
        }

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        inline eProsima_user_DllExport AMM::UUID& id()
        {
            return m_id;
        }
        /*!
         * @brief This function copies the value in member fragment_id
         * @param _fragment_id New value to be copied in member fragment_id
         */
        inline eProsima_user_DllExport void fragment_id(const AMM::UUID &_fragment_id)
        {
            m_fragment_id = _fragment_id;
        }

        /*!
         * @brief This function moves the value in member fragment_id
         * @param _fragment_id New value to be moved in member fragment_id
         */
        inline eProsima_user_DllExport void fragment_id(AMM::UUID &&_fragment_id)
        {
            m_fragment_id = std::move(_fragment_id);
        }

        /*!
         * @brief This function returns a constant reference to member fragment_id
         * @return Constant reference to member fragment_id
         */
        inline eProsima_user_DllExport const AMM::UUID& fragment_id() const
        {
            return m_fragment_id;
        }

        /*!
         * @brief This function returns a reference to member fragment_id
         * @return Reference to member fragment_id
         */
        inline eProsima_user_DllExport AMM::UUID& fragment_id()
        {
            return m_fragment_id;
        }
        /*!
         * @brief This function sets a value in member status
         * @param _status New value for member status
         */
        inline eProsima_user_DllExport void status(AMM::FAR_Status _status)
        {
            m_status = _status;
        }

        /*!
         * @brief This function returns the value of member status
         * @return Value of member status
         */
        inline eProsima_user_DllExport AMM::FAR_Status status() const
        {
            return m_status;
        }

        /*!
         * @brief This function returns a reference to member status
         * @return Reference to member status
         */
        inline eProsima_user_DllExport AMM::FAR_Status& status()
        {
            return m_status;
        }
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
        {
            m_timestamp = _timestamp;
        }

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        inline eProsima_user_DllExport uint64_t timestamp() const
        {
            return m_timestamp;
        }

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        inline eProsima_user_DllExport uint64_t& timestamp()
        {
            return m_timestamp;
        }
        /*!
         * @brief This function copies the value in member location
         * @param _location New value to be copied in member location
         */
        inline eProsima_user_DllExport void location(const AMM::FMA_Location &_location)
        {
            m_location = _location;
        }

        /*!
         * @brief This function moves the value in member location
         * @param _location New value to be moved in member location
         */
        inline eProsima_user_DllExport void location(AMM::FMA_Location &&_location)
        {
            m_location = std::move(_location);
        }

        /*!
         * @brief This function returns a constant reference to member location
         * @return Constant reference to member location
         */
        inline eProsima_user_DllExport const AMM::FMA_Location& location() const
        {
            return m_location;
        }

        /*!
         * @brief This function returns a reference to member location
         * @return Reference to member location
         */
        inline eProsima_user_DllExport AMM::FMA_Location& location()
        {
            return m_location;
        }
        /*!
         * @brief This function copies the value in member practitioner
         * @param _practitioner New value to be copied in member practitioner
         */
        inline eProsima_user_DllExport void practitioner(const std::string &_practitioner)
        {
            m_practitioner = _practitioner;
        }

        /*!
         * @brief This function moves the value in member practitioner
         * @param _practitioner New value to be moved in member practitioner
         */
        inline eProsima_user_DllExport void practitioner(std::string &&_practitioner)
        {
            m_practitioner = std::move(_practitioner);
        }

        /*!
         * @brief This function returns a constant reference to member practitioner
         * @return Constant reference to member practitioner
         */
        inline eProsima_user_DllExport const std::string& practitioner() const
        {
            return m_practitioner;
        }

        /*!
         * @brief This function returns a reference to member practitioner
         * @return Reference to member practitioner
         */
        inline eProsima_user_DllExport std::string& practitioner()
        {
            return m_practitioner;
        }
        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        inline eProsima_user_DllExport void type(const std::string &_type)
        {
            m_type = _type;
        }

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        inline eProsima_user_DllExport void type(std::string &&_type)
        {
            m_type = std::move(_type);
        }

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        inline eProsima_user_DllExport const std::string& type() const
        {
            return m_type;
        }

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        inline eProsima_user_DllExport std::string& type()
        {
            return m_type;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::string &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::string &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::string& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::string& data()
        {
            return m_data;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::FragmentAmendmentRequest& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        AMM::UUID m_id;
        AMM::UUID m_fragment_id;
        AMM::FAR_Status m_status;
        uint64_t m_timestamp;
        AMM::FMA_Location m_location;
        std::string m_practitioner;
        std::string m_type;
        std::string m_data;
    };
    /*!
     * @brief This class represents the enumeration LogLevel defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    enum LogLevel : uint32_t
    {
        L_FATAL,
        L_ERROR,
        L_WARN,
        L_INFO,
        L_DEBUG,
        L_TRACE
    };
    /*!
     * @brief This class represents the structure Log defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class Log
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Log();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Log();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::Log that will be copied.
         */
        eProsima_user_DllExport Log(const Log &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::Log that will be copied.
         */
        eProsima_user_DllExport Log(Log &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::Log that will be copied.
         */
        eProsima_user_DllExport Log& operator=(const Log &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::Log that will be copied.
         */
        eProsima_user_DllExport Log& operator=(Log &&x);

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
        {
            m_timestamp = _timestamp;
        }

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        inline eProsima_user_DllExport uint64_t timestamp() const
        {
            return m_timestamp;
        }

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        inline eProsima_user_DllExport uint64_t& timestamp()
        {
            return m_timestamp;
        }
        /*!
         * @brief This function copies the value in member module_id
         * @param _module_id New value to be copied in member module_id
         */
        inline eProsima_user_DllExport void module_id(const std::string &_module_id)
        {
            m_module_id = _module_id;
        }

        /*!
         * @brief This function moves the value in member module_id
         * @param _module_id New value to be moved in member module_id
         */
        inline eProsima_user_DllExport void module_id(std::string &&_module_id)
        {
            m_module_id = std::move(_module_id);
        }

        /*!
         * @brief This function returns a constant reference to member module_id
         * @return Constant reference to member module_id
         */
        inline eProsima_user_DllExport const std::string& module_id() const
        {
            return m_module_id;
        }

        /*!
         * @brief This function returns a reference to member module_id
         * @return Reference to member module_id
         */
        inline eProsima_user_DllExport std::string& module_id()
        {
            return m_module_id;
        }
        /*!
         * @brief This function sets a value in member level
         * @param _level New value for member level
         */
        inline eProsima_user_DllExport void level(AMM::LogLevel _level)
        {
            m_level = _level;
        }

        /*!
         * @brief This function returns the value of member level
         * @return Value of member level
         */
        inline eProsima_user_DllExport AMM::LogLevel level() const
        {
            return m_level;
        }

        /*!
         * @brief This function returns a reference to member level
         * @return Reference to member level
         */
        inline eProsima_user_DllExport AMM::LogLevel& level()
        {
            return m_level;
        }
        /*!
         * @brief This function copies the value in member message
         * @param _message New value to be copied in member message
         */
        inline eProsima_user_DllExport void message(const std::string &_message)
        {
            m_message = _message;
        }

        /*!
         * @brief This function moves the value in member message
         * @param _message New value to be moved in member message
         */
        inline eProsima_user_DllExport void message(std::string &&_message)
        {
            m_message = std::move(_message);
        }

        /*!
         * @brief This function returns a constant reference to member message
         * @return Constant reference to member message
         */
        inline eProsima_user_DllExport const std::string& message() const
        {
            return m_message;
        }

        /*!
         * @brief This function returns a reference to member message
         * @return Reference to member message
         */
        inline eProsima_user_DllExport std::string& message()
        {
            return m_message;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Log& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint64_t m_timestamp;
        std::string m_module_id;
        AMM::LogLevel m_level;
        std::string m_message;
    };
    /*!
     * @brief This class represents the structure ModuleConfiguration defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class ModuleConfiguration
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ModuleConfiguration();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ModuleConfiguration();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::ModuleConfiguration that will be copied.
         */
        eProsima_user_DllExport ModuleConfiguration(const ModuleConfiguration &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::ModuleConfiguration that will be copied.
         */
        eProsima_user_DllExport ModuleConfiguration(ModuleConfiguration &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::ModuleConfiguration that will be copied.
         */
        eProsima_user_DllExport ModuleConfiguration& operator=(const ModuleConfiguration &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::ModuleConfiguration that will be copied.
         */
        eProsima_user_DllExport ModuleConfiguration& operator=(ModuleConfiguration &&x);

        /*!
         * @brief This function copies the value in member name
         * @param _name New value to be copied in member name
         */
        inline eProsima_user_DllExport void name(const std::string &_name)
        {
            m_name = _name;
        }

        /*!
         * @brief This function moves the value in member name
         * @param _name New value to be moved in member name
         */
        inline eProsima_user_DllExport void name(std::string &&_name)
        {
            m_name = std::move(_name);
        }

        /*!
         * @brief This function returns a constant reference to member name
         * @return Constant reference to member name
         */
        inline eProsima_user_DllExport const std::string& name() const
        {
            return m_name;
        }

        /*!
         * @brief This function returns a reference to member name
         * @return Reference to member name
         */
        inline eProsima_user_DllExport std::string& name()
        {
            return m_name;
        }
        /*!
         * @brief This function copies the value in member manufacturer
         * @param _manufacturer New value to be copied in member manufacturer
         */
        inline eProsima_user_DllExport void manufacturer(const std::string &_manufacturer)
        {
            m_manufacturer = _manufacturer;
        }

        /*!
         * @brief This function moves the value in member manufacturer
         * @param _manufacturer New value to be moved in member manufacturer
         */
        inline eProsima_user_DllExport void manufacturer(std::string &&_manufacturer)
        {
            m_manufacturer = std::move(_manufacturer);
        }

        /*!
         * @brief This function returns a constant reference to member manufacturer
         * @return Constant reference to member manufacturer
         */
        inline eProsima_user_DllExport const std::string& manufacturer() const
        {
            return m_manufacturer;
        }

        /*!
         * @brief This function returns a reference to member manufacturer
         * @return Reference to member manufacturer
         */
        inline eProsima_user_DllExport std::string& manufacturer()
        {
            return m_manufacturer;
        }
        /*!
         * @brief This function copies the value in member model
         * @param _model New value to be copied in member model
         */
        inline eProsima_user_DllExport void model(const std::string &_model)
        {
            m_model = _model;
        }

        /*!
         * @brief This function moves the value in member model
         * @param _model New value to be moved in member model
         */
        inline eProsima_user_DllExport void model(std::string &&_model)
        {
            m_model = std::move(_model);
        }

        /*!
         * @brief This function returns a constant reference to member model
         * @return Constant reference to member model
         */
        inline eProsima_user_DllExport const std::string& model() const
        {
            return m_model;
        }

        /*!
         * @brief This function returns a reference to member model
         * @return Reference to member model
         */
        inline eProsima_user_DllExport std::string& model()
        {
            return m_model;
        }
        /*!
         * @brief This function copies the value in member serial_number
         * @param _serial_number New value to be copied in member serial_number
         */
        inline eProsima_user_DllExport void serial_number(const std::string &_serial_number)
        {
            m_serial_number = _serial_number;
        }

        /*!
         * @brief This function moves the value in member serial_number
         * @param _serial_number New value to be moved in member serial_number
         */
        inline eProsima_user_DllExport void serial_number(std::string &&_serial_number)
        {
            m_serial_number = std::move(_serial_number);
        }

        /*!
         * @brief This function returns a constant reference to member serial_number
         * @return Constant reference to member serial_number
         */
        inline eProsima_user_DllExport const std::string& serial_number() const
        {
            return m_serial_number;
        }

        /*!
         * @brief This function returns a reference to member serial_number
         * @return Reference to member serial_number
         */
        inline eProsima_user_DllExport std::string& serial_number()
        {
            return m_serial_number;
        }
        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        inline eProsima_user_DllExport void id(const AMM::UUID &_id)
        {
            m_id = _id;
        }

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        inline eProsima_user_DllExport void id(AMM::UUID &&_id)
        {
            m_id = std::move(_id);
        }

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        inline eProsima_user_DllExport const AMM::UUID& id() const
        {
            return m_id;
        }

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        inline eProsima_user_DllExport AMM::UUID& id()
        {
            return m_id;
        }
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
        {
            m_timestamp = _timestamp;
        }

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        inline eProsima_user_DllExport uint64_t timestamp() const
        {
            return m_timestamp;
        }

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        inline eProsima_user_DllExport uint64_t& timestamp()
        {
            return m_timestamp;
        }
        /*!
         * @brief This function copies the value in member ip_address
         * @param _ip_address New value to be copied in member ip_address
         */
        inline eProsima_user_DllExport void ip_address(const std::array<uint8_t, 4> &_ip_address)
        {
            m_ip_address = _ip_address;
        }

        /*!
         * @brief This function moves the value in member ip_address
         * @param _ip_address New value to be moved in member ip_address
         */
        inline eProsima_user_DllExport void ip_address(std::array<uint8_t, 4> &&_ip_address)
        {
            m_ip_address = std::move(_ip_address);
        }

        /*!
         * @brief This function returns a constant reference to member ip_address
         * @return Constant reference to member ip_address
         */
        inline eProsima_user_DllExport const std::array<uint8_t, 4>& ip_address() const
        {
            return m_ip_address;
        }

        /*!
         * @brief This function returns a reference to member ip_address
         * @return Reference to member ip_address
         */
        inline eProsima_user_DllExport std::array<uint8_t, 4>& ip_address()
        {
            return m_ip_address;
        }
        /*!
         * @brief This function copies the value in member capabilities_configuration
         * @param _capabilities_configuration New value to be copied in member capabilities_configuration
         */
        inline eProsima_user_DllExport void capabilities_configuration(const std::string &_capabilities_configuration)
        {
            m_capabilities_configuration = _capabilities_configuration;
        }

        /*!
         * @brief This function moves the value in member capabilities_configuration
         * @param _capabilities_configuration New value to be moved in member capabilities_configuration
         */
        inline eProsima_user_DllExport void capabilities_configuration(std::string &&_capabilities_configuration)
        {
            m_capabilities_configuration = std::move(_capabilities_configuration);
        }

        /*!
         * @brief This function returns a constant reference to member capabilities_configuration
         * @return Constant reference to member capabilities_configuration
         */
        inline eProsima_user_DllExport const std::string& capabilities_configuration() const
        {
            return m_capabilities_configuration;
        }

        /*!
         * @brief This function returns a reference to member capabilities_configuration
         * @return Reference to member capabilities_configuration
         */
        inline eProsima_user_DllExport std::string& capabilities_configuration()
        {
            return m_capabilities_configuration;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::ModuleConfiguration& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        std::string m_name;
        std::string m_manufacturer;
        std::string m_model;
        std::string m_serial_number;
        AMM::UUID m_id;
        uint64_t m_timestamp;
        std::array<uint8_t, 4> m_ip_address;
        std::string m_capabilities_configuration;
    };
    /*!
     * @brief This class represents the structure OmittedEvent defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class OmittedEvent
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport OmittedEvent();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~OmittedEvent();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::OmittedEvent that will be copied.
         */
        eProsima_user_DllExport OmittedEvent(const OmittedEvent &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::OmittedEvent that will be copied.
         */
        eProsima_user_DllExport OmittedEvent(OmittedEvent &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::OmittedEvent that will be copied.
         */
        eProsima_user_DllExport OmittedEvent& operator=(const OmittedEvent &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::OmittedEvent that will be copied.
         */
        eProsima_user_DllExport OmittedEvent& operator=(OmittedEvent &&x);

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        inline eProsima_user_DllExport void id(const AMM::UUID &_id)
        {
            m_id = _id;
        }

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        inline eProsima_user_DllExport void id(AMM::UUID &&_id)
        {
            m_id = std::move(_id);
        }

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        inline eProsima_user_DllExport const AMM::UUID& id() const
        {
            return m_id;
        }

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        inline eProsima_user_DllExport AMM::UUID& id()
        {
            return m_id;
        }
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
        {
            m_timestamp = _timestamp;
        }

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        inline eProsima_user_DllExport uint64_t timestamp() const
        {
            return m_timestamp;
        }

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        inline eProsima_user_DllExport uint64_t& timestamp()
        {
            return m_timestamp;
        }
        /*!
         * @brief This function copies the value in member location
         * @param _location New value to be copied in member location
         */
        inline eProsima_user_DllExport void location(const AMM::FMA_Location &_location)
        {
            m_location = _location;
        }

        /*!
         * @brief This function moves the value in member location
         * @param _location New value to be moved in member location
         */
        inline eProsima_user_DllExport void location(AMM::FMA_Location &&_location)
        {
            m_location = std::move(_location);
        }

        /*!
         * @brief This function returns a constant reference to member location
         * @return Constant reference to member location
         */
        inline eProsima_user_DllExport const AMM::FMA_Location& location() const
        {
            return m_location;
        }

        /*!
         * @brief This function returns a reference to member location
         * @return Reference to member location
         */
        inline eProsima_user_DllExport AMM::FMA_Location& location()
        {
            return m_location;
        }
        /*!
         * @brief This function copies the value in member practitioner
         * @param _practitioner New value to be copied in member practitioner
         */
        inline eProsima_user_DllExport void practitioner(const std::string &_practitioner)
        {
            m_practitioner = _practitioner;
        }

        /*!
         * @brief This function moves the value in member practitioner
         * @param _practitioner New value to be moved in member practitioner
         */
        inline eProsima_user_DllExport void practitioner(std::string &&_practitioner)
        {
            m_practitioner = std::move(_practitioner);
        }

        /*!
         * @brief This function returns a constant reference to member practitioner
         * @return Constant reference to member practitioner
         */
        inline eProsima_user_DllExport const std::string& practitioner() const
        {
            return m_practitioner;
        }

        /*!
         * @brief This function returns a reference to member practitioner
         * @return Reference to member practitioner
         */
        inline eProsima_user_DllExport std::string& practitioner()
        {
            return m_practitioner;
        }
        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        inline eProsima_user_DllExport void type(const std::string &_type)
        {
            m_type = _type;
        }

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        inline eProsima_user_DllExport void type(std::string &&_type)
        {
            m_type = std::move(_type);
        }

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        inline eProsima_user_DllExport const std::string& type() const
        {
            return m_type;
        }

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        inline eProsima_user_DllExport std::string& type()
        {
            return m_type;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::string &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::string &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::string& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::string& data()
        {
            return m_data;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::OmittedEvent& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        AMM::UUID m_id;
        uint64_t m_timestamp;
        AMM::FMA_Location m_location;
        std::string m_practitioner;
        std::string m_type;
        std::string m_data;
    };
    /*!
     * @brief This class represents the structure AMM_Version defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class AMM_Version
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport AMM_Version();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~AMM_Version();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::AMM_Version that will be copied.
         */
        eProsima_user_DllExport AMM_Version(const AMM_Version &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::AMM_Version that will be copied.
         */
        eProsima_user_DllExport AMM_Version(AMM_Version &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::AMM_Version that will be copied.
         */
        eProsima_user_DllExport AMM_Version& operator=(const AMM_Version &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::AMM_Version that will be copied.
         */
        eProsima_user_DllExport AMM_Version& operator=(AMM_Version &&x);

        /*!
         * @brief This function sets a value in member major
         * @param _major New value for member major
         */
        inline eProsima_user_DllExport void major(uint16_t _major)
        {
            m_major = _major;
        }

        /*!
         * @brief This function returns the value of member major
         * @return Value of member major
         */
        inline eProsima_user_DllExport uint16_t major() const
        {
            return m_major;
        }

        /*!
         * @brief This function returns a reference to member major
         * @return Reference to member major
         */
        inline eProsima_user_DllExport uint16_t& major()
        {
            return m_major;
        }
        /*!
         * @brief This function sets a value in member minor
         * @param _minor New value for member minor
         */
        inline eProsima_user_DllExport void minor(uint16_t _minor)
        {
            m_minor = _minor;
        }

        /*!
         * @brief This function returns the value of member minor
         * @return Value of member minor
         */
        inline eProsima_user_DllExport uint16_t minor() const
        {
            return m_minor;
        }

        /*!
         * @brief This function returns a reference to member minor
         * @return Reference to member minor
         */
        inline eProsima_user_DllExport uint16_t& minor()
        {
            return m_minor;
        }
        /*!
         * @brief This function sets a value in member patch
         * @param _patch New value for member patch
         */
        inline eProsima_user_DllExport void patch(uint16_t _patch)
        {
            m_patch = _patch;
        }

        /*!
         * @brief This function returns the value of member patch
         * @return Value of member patch
         */
        inline eProsima_user_DllExport uint16_t patch() const
        {
            return m_patch;
        }

        /*!
         * @brief This function returns a reference to member patch
         * @return Reference to member patch
         */
        inline eProsima_user_DllExport uint16_t& patch()
        {
            return m_patch;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::AMM_Version& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint16_t m_major;
        uint16_t m_minor;
        uint16_t m_patch;
    };
    /*!
     * @brief This class represents the structure OperationalDescription defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class OperationalDescription
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport OperationalDescription();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~OperationalDescription();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::OperationalDescription that will be copied.
         */
        eProsima_user_DllExport OperationalDescription(const OperationalDescription &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::OperationalDescription that will be copied.
         */
        eProsima_user_DllExport OperationalDescription(OperationalDescription &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::OperationalDescription that will be copied.
         */
        eProsima_user_DllExport OperationalDescription& operator=(const OperationalDescription &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::OperationalDescription that will be copied.
         */
        eProsima_user_DllExport OperationalDescription& operator=(OperationalDescription &&x);

        /*!
         * @brief This function copies the value in member name
         * @param _name New value to be copied in member name
         */
        inline eProsima_user_DllExport void name(const std::string &_name)
        {
            m_name = _name;
        }

        /*!
         * @brief This function moves the value in member name
         * @param _name New value to be moved in member name
         */
        inline eProsima_user_DllExport void name(std::string &&_name)
        {
            m_name = std::move(_name);
        }

        /*!
         * @brief This function returns a constant reference to member name
         * @return Constant reference to member name
         */
        inline eProsima_user_DllExport const std::string& name() const
        {
            return m_name;
        }

        /*!
         * @brief This function returns a reference to member name
         * @return Reference to member name
         */
        inline eProsima_user_DllExport std::string& name()
        {
            return m_name;
        }
        /*!
         * @brief This function copies the value in member description
         * @param _description New value to be copied in member description
         */
        inline eProsima_user_DllExport void description(const std::string &_description)
        {
            m_description = _description;
        }

        /*!
         * @brief This function moves the value in member description
         * @param _description New value to be moved in member description
         */
        inline eProsima_user_DllExport void description(std::string &&_description)
        {
            m_description = std::move(_description);
        }

        /*!
         * @brief This function returns a constant reference to member description
         * @return Constant reference to member description
         */
        inline eProsima_user_DllExport const std::string& description() const
        {
            return m_description;
        }

        /*!
         * @brief This function returns a reference to member description
         * @return Reference to member description
         */
        inline eProsima_user_DllExport std::string& description()
        {
            return m_description;
        }
        /*!
         * @brief This function copies the value in member manufacturer
         * @param _manufacturer New value to be copied in member manufacturer
         */
        inline eProsima_user_DllExport void manufacturer(const std::string &_manufacturer)
        {
            m_manufacturer = _manufacturer;
        }

        /*!
         * @brief This function moves the value in member manufacturer
         * @param _manufacturer New value to be moved in member manufacturer
         */
        inline eProsima_user_DllExport void manufacturer(std::string &&_manufacturer)
        {
            m_manufacturer = std::move(_manufacturer);
        }

        /*!
         * @brief This function returns a constant reference to member manufacturer
         * @return Constant reference to member manufacturer
         */
        inline eProsima_user_DllExport const std::string& manufacturer() const
        {
            return m_manufacturer;
        }

        /*!
         * @brief This function returns a reference to member manufacturer
         * @return Reference to member manufacturer
         */
        inline eProsima_user_DllExport std::string& manufacturer()
        {
            return m_manufacturer;
        }
        /*!
         * @brief This function copies the value in member model
         * @param _model New value to be copied in member model
         */
        inline eProsima_user_DllExport void model(const std::string &_model)
        {
            m_model = _model;
        }

        /*!
         * @brief This function moves the value in member model
         * @param _model New value to be moved in member model
         */
        inline eProsima_user_DllExport void model(std::string &&_model)
        {
            m_model = std::move(_model);
        }

        /*!
         * @brief This function returns a constant reference to member model
         * @return Constant reference to member model
         */
        inline eProsima_user_DllExport const std::string& model() const
        {
            return m_model;
        }

        /*!
         * @brief This function returns a reference to member model
         * @return Reference to member model
         */
        inline eProsima_user_DllExport std::string& model()
        {
            return m_model;
        }
        /*!
         * @brief This function copies the value in member serial_number
         * @param _serial_number New value to be copied in member serial_number
         */
        inline eProsima_user_DllExport void serial_number(const std::string &_serial_number)
        {
            m_serial_number = _serial_number;
        }

        /*!
         * @brief This function moves the value in member serial_number
         * @param _serial_number New value to be moved in member serial_number
         */
        inline eProsima_user_DllExport void serial_number(std::string &&_serial_number)
        {
            m_serial_number = std::move(_serial_number);
        }

        /*!
         * @brief This function returns a constant reference to member serial_number
         * @return Constant reference to member serial_number
         */
        inline eProsima_user_DllExport const std::string& serial_number() const
        {
            return m_serial_number;
        }

        /*!
         * @brief This function returns a reference to member serial_number
         * @return Reference to member serial_number
         */
        inline eProsima_user_DllExport std::string& serial_number()
        {
            return m_serial_number;
        }
        /*!
         * @brief This function copies the value in member module_version
         * @param _module_version New value to be copied in member module_version
         */
        inline eProsima_user_DllExport void module_version(const std::string &_module_version)
        {
            m_module_version = _module_version;
        }

        /*!
         * @brief This function moves the value in member module_version
         * @param _module_version New value to be moved in member module_version
         */
        inline eProsima_user_DllExport void module_version(std::string &&_module_version)
        {
            m_module_version = std::move(_module_version);
        }

        /*!
         * @brief This function returns a constant reference to member module_version
         * @return Constant reference to member module_version
         */
        inline eProsima_user_DllExport const std::string& module_version() const
        {
            return m_module_version;
        }

        /*!
         * @brief This function returns a reference to member module_version
         * @return Reference to member module_version
         */
        inline eProsima_user_DllExport std::string& module_version()
        {
            return m_module_version;
        }
        /*!
         * @brief This function copies the value in member amm_version
         * @param _amm_version New value to be copied in member amm_version
         */
        inline eProsima_user_DllExport void amm_version(const AMM::AMM_Version &_amm_version)
        {
            m_amm_version = _amm_version;
        }

        /*!
         * @brief This function moves the value in member amm_version
         * @param _amm_version New value to be moved in member amm_version
         */
        inline eProsima_user_DllExport void amm_version(AMM::AMM_Version &&_amm_version)
        {
            m_amm_version = std::move(_amm_version);
        }

        /*!
         * @brief This function returns a constant reference to member amm_version
         * @return Constant reference to member amm_version
         */
        inline eProsima_user_DllExport const AMM::AMM_Version& amm_version() const
        {
            return m_amm_version;
        }

        /*!
         * @brief This function returns a reference to member amm_version
         * @return Reference to member amm_version
         */
        inline eProsima_user_DllExport AMM::AMM_Version& amm_version()
        {
            return m_amm_version;
        }
        /*!
         * @brief This function copies the value in member capabilities_schema
         * @param _capabilities_schema New value to be copied in member capabilities_schema
         */
        inline eProsima_user_DllExport void capabilities_schema(const std::string &_capabilities_schema)
        {
            m_capabilities_schema = _capabilities_schema;
        }

        /*!
         * @brief This function moves the value in member capabilities_schema
         * @param _capabilities_schema New value to be moved in member capabilities_schema
         */
        inline eProsima_user_DllExport void capabilities_schema(std::string &&_capabilities_schema)
        {
            m_capabilities_schema = std::move(_capabilities_schema);
        }

        /*!
         * @brief This function returns a constant reference to member capabilities_schema
         * @return Constant reference to member capabilities_schema
         */
        inline eProsima_user_DllExport const std::string& capabilities_schema() const
        {
            return m_capabilities_schema;
        }

        /*!
         * @brief This function returns a reference to member capabilities_schema
         * @return Reference to member capabilities_schema
         */
        inline eProsima_user_DllExport std::string& capabilities_schema()
        {
            return m_capabilities_schema;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::OperationalDescription& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        std::string m_name;
        std::string m_description;
        std::string m_manufacturer;
        std::string m_model;
        std::string m_serial_number;
        std::string m_module_version;
        AMM::AMM_Version m_amm_version;
        std::string m_capabilities_schema;
    };
    /*!
     * @brief This class represents the structure PhysiologyModification defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class PhysiologyModification
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PhysiologyModification();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PhysiologyModification();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::PhysiologyModification that will be copied.
         */
        eProsima_user_DllExport PhysiologyModification(const PhysiologyModification &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::PhysiologyModification that will be copied.
         */
        eProsima_user_DllExport PhysiologyModification(PhysiologyModification &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::PhysiologyModification that will be copied.
         */
        eProsima_user_DllExport PhysiologyModification& operator=(const PhysiologyModification &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::PhysiologyModification that will be copied.
         */
        eProsima_user_DllExport PhysiologyModification& operator=(PhysiologyModification &&x);

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        inline eProsima_user_DllExport void id(const AMM::UUID &_id)
        {
            m_id = _id;
        }

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        inline eProsima_user_DllExport void id(AMM::UUID &&_id)
        {
            m_id = std::move(_id);
        }

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        inline eProsima_user_DllExport const AMM::UUID& id() const
        {
            return m_id;
        }

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        inline eProsima_user_DllExport AMM::UUID& id()
        {
            return m_id;
        }
        /*!
         * @brief This function copies the value in member event_id
         * @param _event_id New value to be copied in member event_id
         */
        inline eProsima_user_DllExport void event_id(const AMM::UUID &_event_id)
        {
            m_event_id = _event_id;
        }

        /*!
         * @brief This function moves the value in member event_id
         * @param _event_id New value to be moved in member event_id
         */
        inline eProsima_user_DllExport void event_id(AMM::UUID &&_event_id)
        {
            m_event_id = std::move(_event_id);
        }

        /*!
         * @brief This function returns a constant reference to member event_id
         * @return Constant reference to member event_id
         */
        inline eProsima_user_DllExport const AMM::UUID& event_id() const
        {
            return m_event_id;
        }

        /*!
         * @brief This function returns a reference to member event_id
         * @return Reference to member event_id
         */
        inline eProsima_user_DllExport AMM::UUID& event_id()
        {
            return m_event_id;
        }
        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        inline eProsima_user_DllExport void type(const std::string &_type)
        {
            m_type = _type;
        }

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        inline eProsima_user_DllExport void type(std::string &&_type)
        {
            m_type = std::move(_type);
        }

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        inline eProsima_user_DllExport const std::string& type() const
        {
            return m_type;
        }

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        inline eProsima_user_DllExport std::string& type()
        {
            return m_type;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::string &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::string &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::string& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::string& data()
        {
            return m_data;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::PhysiologyModification& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        AMM::UUID m_id;
        AMM::UUID m_event_id;
        std::string m_type;
        std::string m_data;
    };
    /*!
     * @brief This class represents the structure PhysiologyValue defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class PhysiologyValue
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PhysiologyValue();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PhysiologyValue();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::PhysiologyValue that will be copied.
         */
        eProsima_user_DllExport PhysiologyValue(const PhysiologyValue &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::PhysiologyValue that will be copied.
         */
        eProsima_user_DllExport PhysiologyValue(PhysiologyValue &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::PhysiologyValue that will be copied.
         */
        eProsima_user_DllExport PhysiologyValue& operator=(const PhysiologyValue &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::PhysiologyValue that will be copied.
         */
        eProsima_user_DllExport PhysiologyValue& operator=(PhysiologyValue &&x);

        /*!
         * @brief This function sets a value in member simulation_frame
         * @param _simulation_frame New value for member simulation_frame
         */
        inline eProsima_user_DllExport void simulation_frame(int64_t _simulation_frame)
        {
            m_simulation_frame = _simulation_frame;
        }

        /*!
         * @brief This function returns the value of member simulation_frame
         * @return Value of member simulation_frame
         */
        inline eProsima_user_DllExport int64_t simulation_frame() const
        {
            return m_simulation_frame;
        }

        /*!
         * @brief This function returns a reference to member simulation_frame
         * @return Reference to member simulation_frame
         */
        inline eProsima_user_DllExport int64_t& simulation_frame()
        {
            return m_simulation_frame;
        }
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
        {
            m_timestamp = _timestamp;
        }

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        inline eProsima_user_DllExport uint64_t timestamp() const
        {
            return m_timestamp;
        }

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        inline eProsima_user_DllExport uint64_t& timestamp()
        {
            return m_timestamp;
        }
        /*!
         * @brief This function copies the value in member name
         * @param _name New value to be copied in member name
         */
        inline eProsima_user_DllExport void name(const std::string &_name)
        {
            m_name = _name;
        }

        /*!
         * @brief This function moves the value in member name
         * @param _name New value to be moved in member name
         */
        inline eProsima_user_DllExport void name(std::string &&_name)
        {
            m_name = std::move(_name);
        }

        /*!
         * @brief This function returns a constant reference to member name
         * @return Constant reference to member name
         */
        inline eProsima_user_DllExport const std::string& name() const
        {
            return m_name;
        }

        /*!
         * @brief This function returns a reference to member name
         * @return Reference to member name
         */
        inline eProsima_user_DllExport std::string& name()
        {
            return m_name;
        }
        /*!
         * @brief This function copies the value in member unit
         * @param _unit New value to be copied in member unit
         */
        inline eProsima_user_DllExport void unit(const std::string &_unit)
        {
            m_unit = _unit;
        }

        /*!
         * @brief This function moves the value in member unit
         * @param _unit New value to be moved in member unit
         */
        inline eProsima_user_DllExport void unit(std::string &&_unit)
        {
            m_unit = std::move(_unit);
        }

        /*!
         * @brief This function returns a constant reference to member unit
         * @return Constant reference to member unit
         */
        inline eProsima_user_DllExport const std::string& unit() const
        {
            return m_unit;
        }

        /*!
         * @brief This function returns a reference to member unit
         * @return Reference to member unit
         */
        inline eProsima_user_DllExport std::string& unit()
        {
            return m_unit;
        }
        /*!
         * @brief This function sets a value in member value
         * @param _value New value for member value
         */
        inline eProsima_user_DllExport void value(double _value)
        {
            m_value = _value;
        }

        /*!
         * @brief This function returns the value of member value
         * @return Value of member value
         */
        inline eProsima_user_DllExport double value() const
        {
            return m_value;
        }

        /*!
         * @brief This function returns a reference to member value
         * @return Reference to member value
         */
        inline eProsima_user_DllExport double& value()
        {
            return m_value;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::PhysiologyValue& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        int64_t m_simulation_frame;
        uint64_t m_timestamp;
        std::string m_name;
        std::string m_unit;
        double m_value;
    };
    /*!
     * @brief This class represents the structure PhysiologyWaveform defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class PhysiologyWaveform
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PhysiologyWaveform();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PhysiologyWaveform();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::PhysiologyWaveform that will be copied.
         */
        eProsima_user_DllExport PhysiologyWaveform(const PhysiologyWaveform &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::PhysiologyWaveform that will be copied.
         */
        eProsima_user_DllExport PhysiologyWaveform(PhysiologyWaveform &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::PhysiologyWaveform that will be copied.
         */
        eProsima_user_DllExport PhysiologyWaveform& operator=(const PhysiologyWaveform &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::PhysiologyWaveform that will be copied.
         */
        eProsima_user_DllExport PhysiologyWaveform& operator=(PhysiologyWaveform &&x);

        /*!
         * @brief This function sets a value in member simulation_frame
         * @param _simulation_frame New value for member simulation_frame
         */
        inline eProsima_user_DllExport void simulation_frame(int64_t _simulation_frame)
        {
            m_simulation_frame = _simulation_frame;
        }

        /*!
         * @brief This function returns the value of member simulation_frame
         * @return Value of member simulation_frame
         */
        inline eProsima_user_DllExport int64_t simulation_frame() const
        {
            return m_simulation_frame;
        }

        /*!
         * @brief This function returns a reference to member simulation_frame
         * @return Reference to member simulation_frame
         */
        inline eProsima_user_DllExport int64_t& simulation_frame()
        {
            return m_simulation_frame;
        }
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
        {
            m_timestamp = _timestamp;
        }

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        inline eProsima_user_DllExport uint64_t timestamp() const
        {
            return m_timestamp;
        }

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        inline eProsima_user_DllExport uint64_t& timestamp()
        {
            return m_timestamp;
        }
        /*!
         * @brief This function copies the value in member name
         * @param _name New value to be copied in member name
         */
        inline eProsima_user_DllExport void name(const std::string &_name)
        {
            m_name = _name;
        }

        /*!
         * @brief This function moves the value in member name
         * @param _name New value to be moved in member name
         */
        inline eProsima_user_DllExport void name(std::string &&_name)
        {
            m_name = std::move(_name);
        }

        /*!
         * @brief This function returns a constant reference to member name
         * @return Constant reference to member name
         */
        inline eProsima_user_DllExport const std::string& name() const
        {
            return m_name;
        }

        /*!
         * @brief This function returns a reference to member name
         * @return Reference to member name
         */
        inline eProsima_user_DllExport std::string& name()
        {
            return m_name;
        }
        /*!
         * @brief This function copies the value in member unit
         * @param _unit New value to be copied in member unit
         */
        inline eProsima_user_DllExport void unit(const std::string &_unit)
        {
            m_unit = _unit;
        }

        /*!
         * @brief This function moves the value in member unit
         * @param _unit New value to be moved in member unit
         */
        inline eProsima_user_DllExport void unit(std::string &&_unit)
        {
            m_unit = std::move(_unit);
        }

        /*!
         * @brief This function returns a constant reference to member unit
         * @return Constant reference to member unit
         */
        inline eProsima_user_DllExport const std::string& unit() const
        {
            return m_unit;
        }

        /*!
         * @brief This function returns a reference to member unit
         * @return Reference to member unit
         */
        inline eProsima_user_DllExport std::string& unit()
        {
            return m_unit;
        }
        /*!
         * @brief This function sets a value in member value
         * @param _value New value for member value
         */
        inline eProsima_user_DllExport void value(double _value)
        {
            m_value = _value;
        }

        /*!
         * @brief This function returns the value of member value
         * @return Value of member value
         */
        inline eProsima_user_DllExport double value() const
        {
            return m_value;
        }

        /*!
         * @brief This function returns a reference to member value
         * @return Reference to member value
         */
        inline eProsima_user_DllExport double& value()
        {
            return m_value;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::PhysiologyWaveform& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        int64_t m_simulation_frame;
        uint64_t m_timestamp;
        std::string m_name;
        std::string m_unit;
        double m_value;
    };
    /*!
     * @brief This class represents the structure RenderModification defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class RenderModification
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport RenderModification();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~RenderModification();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::RenderModification that will be copied.
         */
        eProsima_user_DllExport RenderModification(const RenderModification &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::RenderModification that will be copied.
         */
        eProsima_user_DllExport RenderModification(RenderModification &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::RenderModification that will be copied.
         */
        eProsima_user_DllExport RenderModification& operator=(const RenderModification &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::RenderModification that will be copied.
         */
        eProsima_user_DllExport RenderModification& operator=(RenderModification &&x);

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        inline eProsima_user_DllExport void id(const AMM::UUID &_id)
        {
            m_id = _id;
        }

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        inline eProsima_user_DllExport void id(AMM::UUID &&_id)
        {
            m_id = std::move(_id);
        }

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        inline eProsima_user_DllExport const AMM::UUID& id() const
        {
            return m_id;
        }

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        inline eProsima_user_DllExport AMM::UUID& id()
        {
            return m_id;
        }
        /*!
         * @brief This function copies the value in member event_id
         * @param _event_id New value to be copied in member event_id
         */
        inline eProsima_user_DllExport void event_id(const AMM::UUID &_event_id)
        {
            m_event_id = _event_id;
        }

        /*!
         * @brief This function moves the value in member event_id
         * @param _event_id New value to be moved in member event_id
         */
        inline eProsima_user_DllExport void event_id(AMM::UUID &&_event_id)
        {
            m_event_id = std::move(_event_id);
        }

        /*!
         * @brief This function returns a constant reference to member event_id
         * @return Constant reference to member event_id
         */
        inline eProsima_user_DllExport const AMM::UUID& event_id() const
        {
            return m_event_id;
        }

        /*!
         * @brief This function returns a reference to member event_id
         * @return Reference to member event_id
         */
        inline eProsima_user_DllExport AMM::UUID& event_id()
        {
            return m_event_id;
        }
        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        inline eProsima_user_DllExport void type(const std::string &_type)
        {
            m_type = _type;
        }

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        inline eProsima_user_DllExport void type(std::string &&_type)
        {
            m_type = std::move(_type);
        }

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        inline eProsima_user_DllExport const std::string& type() const
        {
            return m_type;
        }

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        inline eProsima_user_DllExport std::string& type()
        {
            return m_type;
        }
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        inline eProsima_user_DllExport void data(const std::string &_data)
        {
            m_data = _data;
        }

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        inline eProsima_user_DllExport void data(std::string &&_data)
        {
            m_data = std::move(_data);
        }

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        inline eProsima_user_DllExport const std::string& data() const
        {
            return m_data;
        }

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        inline eProsima_user_DllExport std::string& data()
        {
            return m_data;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::RenderModification& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        AMM::UUID m_id;
        AMM::UUID m_event_id;
        std::string m_type;
        std::string m_data;
    };
    /*!
     * @brief This class represents the enumeration ControlType defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    enum ControlType : uint32_t
    {
        RUN,
        HALT,
        RESET,
        SAVE
    };
    /*!
     * @brief This class represents the structure SimulationControl defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class SimulationControl
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport SimulationControl();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~SimulationControl();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::SimulationControl that will be copied.
         */
        eProsima_user_DllExport SimulationControl(const SimulationControl &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::SimulationControl that will be copied.
         */
        eProsima_user_DllExport SimulationControl(SimulationControl &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::SimulationControl that will be copied.
         */
        eProsima_user_DllExport SimulationControl& operator=(const SimulationControl &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::SimulationControl that will be copied.
         */
        eProsima_user_DllExport SimulationControl& operator=(SimulationControl &&x);

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
        {
            m_timestamp = _timestamp;
        }

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        inline eProsima_user_DllExport uint64_t timestamp() const
        {
            return m_timestamp;
        }

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        inline eProsima_user_DllExport uint64_t& timestamp()
        {
            return m_timestamp;
        }
        /*!
         * @brief This function sets a value in member type
         * @param _type New value for member type
         */
        inline eProsima_user_DllExport void type(AMM::ControlType _type)
        {
            m_type = _type;
        }

        /*!
         * @brief This function returns the value of member type
         * @return Value of member type
         */
        inline eProsima_user_DllExport AMM::ControlType type() const
        {
            return m_type;
        }

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        inline eProsima_user_DllExport AMM::ControlType& type()
        {
            return m_type;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::SimulationControl& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint64_t m_timestamp;
        AMM::ControlType m_type;
    };
    /*!
     * @brief This class represents the enumeration StatusValue defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    enum StatusValue : uint32_t
    {
        OPERATIONAL,
        INOPERATIVE,
        EXIGENT
    };
    /*!
     * @brief This class represents the structure Status defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class Status
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Status();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Status();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::Status that will be copied.
         */
        eProsima_user_DllExport Status(const Status &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::Status that will be copied.
         */
        eProsima_user_DllExport Status(Status &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::Status that will be copied.
         */
        eProsima_user_DllExport Status& operator=(const Status &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::Status that will be copied.
         */
        eProsima_user_DllExport Status& operator=(Status &&x);

        /*!
         * @brief This function copies the value in member module_id
         * @param _module_id New value to be copied in member module_id
         */
        inline eProsima_user_DllExport void module_id(const std::string &_module_id)
        {
            m_module_id = _module_id;
        }

        /*!
         * @brief This function moves the value in member module_id
         * @param _module_id New value to be moved in member module_id
         */
        inline eProsima_user_DllExport void module_id(std::string &&_module_id)
        {
            m_module_id = std::move(_module_id);
        }

        /*!
         * @brief This function returns a constant reference to member module_id
         * @return Constant reference to member module_id
         */
        inline eProsima_user_DllExport const std::string& module_id() const
        {
            return m_module_id;
        }

        /*!
         * @brief This function returns a reference to member module_id
         * @return Reference to member module_id
         */
        inline eProsima_user_DllExport std::string& module_id()
        {
            return m_module_id;
        }
        /*!
         * @brief This function copies the value in member module_name
         * @param _module_name New value to be copied in member module_name
         */
        inline eProsima_user_DllExport void module_name(const std::string &_module_name)
        {
            m_module_name = _module_name;
        }

        /*!
         * @brief This function moves the value in member module_name
         * @param _module_name New value to be moved in member module_name
         */
        inline eProsima_user_DllExport void module_name(std::string &&_module_name)
        {
            m_module_name = std::move(_module_name);
        }

        /*!
         * @brief This function returns a constant reference to member module_name
         * @return Constant reference to member module_name
         */
        inline eProsima_user_DllExport const std::string& module_name() const
        {
            return m_module_name;
        }

        /*!
         * @brief This function returns a reference to member module_name
         * @return Reference to member module_name
         */
        inline eProsima_user_DllExport std::string& module_name()
        {
            return m_module_name;
        }
        /*!
         * @brief This function copies the value in member capability
         * @param _capability New value to be copied in member capability
         */
        inline eProsima_user_DllExport void capability(const std::string &_capability)
        {
            m_capability = _capability;
        }

        /*!
         * @brief This function moves the value in member capability
         * @param _capability New value to be moved in member capability
         */
        inline eProsima_user_DllExport void capability(std::string &&_capability)
        {
            m_capability = std::move(_capability);
        }

        /*!
         * @brief This function returns a constant reference to member capability
         * @return Constant reference to member capability
         */
        inline eProsima_user_DllExport const std::string& capability() const
        {
            return m_capability;
        }

        /*!
         * @brief This function returns a reference to member capability
         * @return Reference to member capability
         */
        inline eProsima_user_DllExport std::string& capability()
        {
            return m_capability;
        }
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
        {
            m_timestamp = _timestamp;
        }

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        inline eProsima_user_DllExport uint64_t timestamp() const
        {
            return m_timestamp;
        }

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        inline eProsima_user_DllExport uint64_t& timestamp()
        {
            return m_timestamp;
        }
        /*!
         * @brief This function sets a value in member value
         * @param _value New value for member value
         */
        inline eProsima_user_DllExport void value(AMM::StatusValue _value)
        {
            m_value = _value;
        }

        /*!
         * @brief This function returns the value of member value
         * @return Value of member value
         */
        inline eProsima_user_DllExport AMM::StatusValue value() const
        {
            return m_value;
        }

        /*!
         * @brief This function returns a reference to member value
         * @return Reference to member value
         */
        inline eProsima_user_DllExport AMM::StatusValue& value()
        {
            return m_value;
        }
        /*!
         * @brief This function copies the value in member message
         * @param _message New value to be copied in member message
         */
        inline eProsima_user_DllExport void message(const std::string &_message)
        {
            m_message = _message;
        }

        /*!
         * @brief This function moves the value in member message
         * @param _message New value to be moved in member message
         */
        inline eProsima_user_DllExport void message(std::string &&_message)
        {
            m_message = std::move(_message);
        }

        /*!
         * @brief This function returns a constant reference to member message
         * @return Constant reference to member message
         */
        inline eProsima_user_DllExport const std::string& message() const
        {
            return m_message;
        }

        /*!
         * @brief This function returns a reference to member message
         * @return Reference to member message
         */
        inline eProsima_user_DllExport std::string& message()
        {
            return m_message;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const AMM::Status& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        std::string m_module_id;
        std::string m_module_name;
        std::string m_capability;
        uint64_t m_timestamp;
        AMM::StatusValue m_value;
        std::string m_message;
    };
}

#endif // _AMM_AMM_STANDARD_H_