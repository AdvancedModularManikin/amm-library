// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file AMM_Extended.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "AMM_Extended.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

AMM::Tick::Tick()
{
    m_frame = 0;

    m_time = 0.0;


}

AMM::Tick::~Tick()
{
}

AMM::Tick::Tick(const Tick &x)
{
    m_frame = x.m_frame;
    m_time = x.m_time;
}

AMM::Tick::Tick(Tick &&x)
{
    m_frame = x.m_frame;
    m_time = x.m_time;
}

AMM::Tick& AMM::Tick::operator=(const Tick &x)
{
    m_frame = x.m_frame;
    m_time = x.m_time;

    return *this;
}

AMM::Tick& AMM::Tick::operator=(Tick &&x)
{
    m_frame = x.m_frame;
    m_time = x.m_time;

    return *this;
}

size_t AMM::Tick::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t AMM::Tick::getCdrSerializedSize(const AMM::Tick& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void AMM::Tick::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_frame;
    scdr << m_time;
}

void AMM::Tick::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_frame;
    dcdr >> m_time;
}

size_t AMM::Tick::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool AMM::Tick::isKeyDefined()
{
    return false;
}

void AMM::Tick::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}
AMM::InstrumentData::InstrumentData()
{



}

AMM::InstrumentData::~InstrumentData()
{
}

AMM::InstrumentData::InstrumentData(const InstrumentData &x)
{
    m_instrument = x.m_instrument;
    m_payload = x.m_payload;
}

AMM::InstrumentData::InstrumentData(InstrumentData &&x)
{
    m_instrument = std::move(x.m_instrument);
    m_payload = std::move(x.m_payload);
}

AMM::InstrumentData& AMM::InstrumentData::operator=(const InstrumentData &x)
{
    m_instrument = x.m_instrument;
    m_payload = x.m_payload;

    return *this;
}

AMM::InstrumentData& AMM::InstrumentData::operator=(InstrumentData &&x)
{
    m_instrument = std::move(x.m_instrument);
    m_payload = std::move(x.m_payload);

    return *this;
}

size_t AMM::InstrumentData::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t AMM::InstrumentData::getCdrSerializedSize(const AMM::InstrumentData& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.instrument().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.payload().size() + 1;


    return current_alignment - initial_alignment;
}

void AMM::InstrumentData::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_instrument;
    scdr << m_payload;
}

void AMM::InstrumentData::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_instrument;
    dcdr >> m_payload;
}

size_t AMM::InstrumentData::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool AMM::InstrumentData::isKeyDefined()
{
    return false;
}

void AMM::InstrumentData::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}
AMM::Command::Command()
{

}

AMM::Command::~Command()
{
}

AMM::Command::Command(const Command &x)
{
    m_message = x.m_message;
}

AMM::Command::Command(Command &&x)
{
    m_message = std::move(x.m_message);
}

AMM::Command& AMM::Command::operator=(const Command &x)
{
    m_message = x.m_message;

    return *this;
}

AMM::Command& AMM::Command::operator=(Command &&x)
{
    m_message = std::move(x.m_message);

    return *this;
}

size_t AMM::Command::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t AMM::Command::getCdrSerializedSize(const AMM::Command& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;

    return current_alignment - initial_alignment;
}

void AMM::Command::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_message;
}

void AMM::Command::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_message;
}

size_t AMM::Command::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            

    return current_align;
}

bool AMM::Command::isKeyDefined()
{
    return false;
}

void AMM::Command::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
}
