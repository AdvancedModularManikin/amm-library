// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AMM_Extended.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "AMM_Extended.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

AMM::Tick::Tick()
{
    // m_frame com.eprosima.idl.parser.typecode.PrimitiveTypeCode@240237d2
    m_frame = 0;
    // m_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@25a65b77
    m_time = 0.0;

}

AMM::Tick::~Tick()
{


}

AMM::Tick::Tick(
        const Tick& x)
{
    m_frame = x.m_frame;
    m_time = x.m_time;
}

AMM::Tick::Tick(
        Tick&& x)
{
    m_frame = x.m_frame;
    m_time = x.m_time;
}

AMM::Tick& AMM::Tick::operator =(
        const Tick& x)
{

    m_frame = x.m_frame;
    m_time = x.m_time;

    return *this;
}

AMM::Tick& AMM::Tick::operator =(
        Tick&& x)
{

    m_frame = x.m_frame;
    m_time = x.m_time;

    return *this;
}

size_t AMM::Tick::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t AMM::Tick::getCdrSerializedSize(
        const AMM::Tick& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void AMM::Tick::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_frame;
    scdr << m_time;

}

void AMM::Tick::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_frame;
    dcdr >> m_time;
}

/*!
 * @brief This function sets a value in member frame
 * @param _frame New value for member frame
 */
void AMM::Tick::frame(
        int64_t _frame)
{
    m_frame = _frame;
}

/*!
 * @brief This function returns the value of member frame
 * @return Value of member frame
 */
int64_t AMM::Tick::frame() const
{
    return m_frame;
}

/*!
 * @brief This function returns a reference to member frame
 * @return Reference to member frame
 */
int64_t& AMM::Tick::frame()
{
    return m_frame;
}

/*!
 * @brief This function sets a value in member time
 * @param _time New value for member time
 */
void AMM::Tick::time(
        float _time)
{
    m_time = _time;
}

/*!
 * @brief This function returns the value of member time
 * @return Value of member time
 */
float AMM::Tick::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
float& AMM::Tick::time()
{
    return m_time;
}


size_t AMM::Tick::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool AMM::Tick::isKeyDefined()
{
    return false;
}

void AMM::Tick::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

AMM::InstrumentData::InstrumentData()
{
    // m_instrument com.eprosima.idl.parser.typecode.StringTypeCode@2ed0fbae
    m_instrument ="";
    // m_payload com.eprosima.idl.parser.typecode.StringTypeCode@212bf671
    m_payload ="";

}

AMM::InstrumentData::~InstrumentData()
{


}

AMM::InstrumentData::InstrumentData(
        const InstrumentData& x)
{
    m_instrument = x.m_instrument;
    m_payload = x.m_payload;
}

AMM::InstrumentData::InstrumentData(
        InstrumentData&& x)
{
    m_instrument = std::move(x.m_instrument);
    m_payload = std::move(x.m_payload);
}

AMM::InstrumentData& AMM::InstrumentData::operator =(
        const InstrumentData& x)
{

    m_instrument = x.m_instrument;
    m_payload = x.m_payload;

    return *this;
}

AMM::InstrumentData& AMM::InstrumentData::operator =(
        InstrumentData&& x)
{

    m_instrument = std::move(x.m_instrument);
    m_payload = std::move(x.m_payload);

    return *this;
}

size_t AMM::InstrumentData::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 4096 + 1;


    return current_alignment - initial_alignment;
}

size_t AMM::InstrumentData::getCdrSerializedSize(
        const AMM::InstrumentData& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.instrument().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.payload().size() + 1;


    return current_alignment - initial_alignment;
}

void AMM::InstrumentData::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_instrument;
    scdr << m_payload;

}

void AMM::InstrumentData::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_instrument;
    dcdr >> m_payload;
}

/*!
 * @brief This function copies the value in member instrument
 * @param _instrument New value to be copied in member instrument
 */
void AMM::InstrumentData::instrument(
        const std::string& _instrument)
{
    m_instrument = _instrument;
}

/*!
 * @brief This function moves the value in member instrument
 * @param _instrument New value to be moved in member instrument
 */
void AMM::InstrumentData::instrument(
        std::string&& _instrument)
{
    m_instrument = std::move(_instrument);
}

/*!
 * @brief This function returns a constant reference to member instrument
 * @return Constant reference to member instrument
 */
const std::string& AMM::InstrumentData::instrument() const
{
    return m_instrument;
}

/*!
 * @brief This function returns a reference to member instrument
 * @return Reference to member instrument
 */
std::string& AMM::InstrumentData::instrument()
{
    return m_instrument;
}
/*!
 * @brief This function copies the value in member payload
 * @param _payload New value to be copied in member payload
 */
void AMM::InstrumentData::payload(
        const std::string& _payload)
{
    m_payload = _payload;
}

/*!
 * @brief This function moves the value in member payload
 * @param _payload New value to be moved in member payload
 */
void AMM::InstrumentData::payload(
        std::string&& _payload)
{
    m_payload = std::move(_payload);
}

/*!
 * @brief This function returns a constant reference to member payload
 * @return Constant reference to member payload
 */
const std::string& AMM::InstrumentData::payload() const
{
    return m_payload;
}

/*!
 * @brief This function returns a reference to member payload
 * @return Reference to member payload
 */
std::string& AMM::InstrumentData::payload()
{
    return m_payload;
}

size_t AMM::InstrumentData::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool AMM::InstrumentData::isKeyDefined()
{
    return false;
}

void AMM::InstrumentData::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

AMM::Command::Command()
{
    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@14a2f921
    m_message ="";

}

AMM::Command::~Command()
{
}

AMM::Command::Command(
        const Command& x)
{
    m_message = x.m_message;
}

AMM::Command::Command(
        Command&& x)
{
    m_message = std::move(x.m_message);
}

AMM::Command& AMM::Command::operator =(
        const Command& x)
{

    m_message = x.m_message;

    return *this;
}

AMM::Command& AMM::Command::operator =(
        Command&& x)
{

    m_message = std::move(x.m_message);

    return *this;
}

size_t AMM::Command::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t AMM::Command::getCdrSerializedSize(
        const AMM::Command& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;

    return current_alignment - initial_alignment;
}

void AMM::Command::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_message;

}

void AMM::Command::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_message;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void AMM::Command::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void AMM::Command::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& AMM::Command::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& AMM::Command::message()
{
    return m_message;
}

size_t AMM::Command::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool AMM::Command::isKeyDefined()
{
    return false;
}

void AMM::Command::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

