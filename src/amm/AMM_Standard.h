// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AMM_Standard.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_AMM_AMM_STANDARD_H_
#define _FAST_DDS_GENERATED_AMM_AMM_STANDARD_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(AMM_Standard_SOURCE)
#define AMM_Standard_DllAPI __declspec( dllexport )
#else
#define AMM_Standard_DllAPI __declspec( dllimport )
#endif // AMM_Standard_SOURCE
#else
#define AMM_Standard_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define AMM_Standard_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace AMM {
    /*!
     * @brief This class represents the structure FMA_Location defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class FMA_Location
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport FMA_Location();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~FMA_Location();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::FMA_Location that will be copied.
         */
        eProsima_user_DllExport FMA_Location(
                const FMA_Location& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::FMA_Location that will be copied.
         */
        eProsima_user_DllExport FMA_Location(
                FMA_Location&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::FMA_Location that will be copied.
         */
        eProsima_user_DllExport FMA_Location& operator =(
                const FMA_Location& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::FMA_Location that will be copied.
         */
        eProsima_user_DllExport FMA_Location& operator =(
                FMA_Location&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::FMA_Location object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const FMA_Location& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::FMA_Location object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const FMA_Location& x) const;

        /*!
         * @brief This function sets a value in member FMAID
         * @param _FMAID New value for member FMAID
         */
        eProsima_user_DllExport void FMAID(
                int32_t _FMAID);

        /*!
         * @brief This function returns the value of member FMAID
         * @return Value of member FMAID
         */
        eProsima_user_DllExport int32_t FMAID() const;

        /*!
         * @brief This function returns a reference to member FMAID
         * @return Reference to member FMAID
         */
        eProsima_user_DllExport int32_t& FMAID();

        /*!
         * @brief This function copies the value in member name
         * @param _name New value to be copied in member name
         */
        eProsima_user_DllExport void name(
                const std::string& _name);

        /*!
         * @brief This function moves the value in member name
         * @param _name New value to be moved in member name
         */
        eProsima_user_DllExport void name(
                std::string&& _name);

        /*!
         * @brief This function returns a constant reference to member name
         * @return Constant reference to member name
         */
        eProsima_user_DllExport const std::string& name() const;

        /*!
         * @brief This function returns a reference to member name
         * @return Reference to member name
         */
        eProsima_user_DllExport std::string& name();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::FMA_Location& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        int32_t m_FMAID;
        std::string m_name;

    };
    /*!
     * @brief This class represents the structure UUID defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class UUID
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport UUID();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~UUID();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::UUID that will be copied.
         */
        eProsima_user_DllExport UUID(
                const UUID& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::UUID that will be copied.
         */
        eProsima_user_DllExport UUID(
                UUID&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::UUID that will be copied.
         */
        eProsima_user_DllExport UUID& operator =(
                const UUID& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::UUID that will be copied.
         */
        eProsima_user_DllExport UUID& operator =(
                UUID&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::UUID object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const UUID& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::UUID object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const UUID& x) const;

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        eProsima_user_DllExport void id(
                const std::string& _id);

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        eProsima_user_DllExport void id(
                std::string&& _id);

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        eProsima_user_DllExport const std::string& id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport std::string& id();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::UUID& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        std::string m_id;

    };
    /*!
     * @brief This class represents the enumeration AssessmentValue defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    enum AssessmentValue : uint32_t
    {
        OMISSION_ERROR,
        COMMISSION_ERROR,
        EXECUTION_ERROR,
        SUCCESS
    };
    /*!
     * @brief This class represents the structure Assessment defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class Assessment
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Assessment();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Assessment();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::Assessment that will be copied.
         */
        eProsima_user_DllExport Assessment(
                const Assessment& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::Assessment that will be copied.
         */
        eProsima_user_DllExport Assessment(
                Assessment&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::Assessment that will be copied.
         */
        eProsima_user_DllExport Assessment& operator =(
                const Assessment& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::Assessment that will be copied.
         */
        eProsima_user_DllExport Assessment& operator =(
                Assessment&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::Assessment object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const Assessment& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::Assessment object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const Assessment& x) const;

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        eProsima_user_DllExport void id(
                const AMM::UUID& _id);

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        eProsima_user_DllExport void id(
                AMM::UUID&& _id);

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        eProsima_user_DllExport const AMM::UUID& id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport AMM::UUID& id();
        /*!
         * @brief This function copies the value in member event_id
         * @param _event_id New value to be copied in member event_id
         */
        eProsima_user_DllExport void event_id(
                const AMM::UUID& _event_id);

        /*!
         * @brief This function moves the value in member event_id
         * @param _event_id New value to be moved in member event_id
         */
        eProsima_user_DllExport void event_id(
                AMM::UUID&& _event_id);

        /*!
         * @brief This function returns a constant reference to member event_id
         * @return Constant reference to member event_id
         */
        eProsima_user_DllExport const AMM::UUID& event_id() const;

        /*!
         * @brief This function returns a reference to member event_id
         * @return Reference to member event_id
         */
        eProsima_user_DllExport AMM::UUID& event_id();
        /*!
         * @brief This function sets a value in member value
         * @param _value New value for member value
         */
        eProsima_user_DllExport void value(
                AMM::AssessmentValue _value);

        /*!
         * @brief This function returns the value of member value
         * @return Value of member value
         */
        eProsima_user_DllExport AMM::AssessmentValue value() const;

        /*!
         * @brief This function returns a reference to member value
         * @return Reference to member value
         */
        eProsima_user_DllExport AMM::AssessmentValue& value();

        /*!
         * @brief This function copies the value in member comment
         * @param _comment New value to be copied in member comment
         */
        eProsima_user_DllExport void comment(
                const std::string& _comment);

        /*!
         * @brief This function moves the value in member comment
         * @param _comment New value to be moved in member comment
         */
        eProsima_user_DllExport void comment(
                std::string&& _comment);

        /*!
         * @brief This function returns a constant reference to member comment
         * @return Constant reference to member comment
         */
        eProsima_user_DllExport const std::string& comment() const;

        /*!
         * @brief This function returns a reference to member comment
         * @return Reference to member comment
         */
        eProsima_user_DllExport std::string& comment();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::Assessment& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        AMM::UUID m_id;
        AMM::UUID m_event_id;
        AMM::AssessmentValue m_value;
        std::string m_comment;

    };
    /*!
     * @brief This class represents the enumeration EventAgentType defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    enum EventAgentType : uint32_t
    {
        LEARNER,
        INSTRUCTOR,
        SCENARIO,
        PHYSIOLOGY
    };
    /*!
     * @brief This class represents the structure EventFragment defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class EventFragment
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport EventFragment();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~EventFragment();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::EventFragment that will be copied.
         */
        eProsima_user_DllExport EventFragment(
                const EventFragment& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::EventFragment that will be copied.
         */
        eProsima_user_DllExport EventFragment(
                EventFragment&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::EventFragment that will be copied.
         */
        eProsima_user_DllExport EventFragment& operator =(
                const EventFragment& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::EventFragment that will be copied.
         */
        eProsima_user_DllExport EventFragment& operator =(
                EventFragment&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::EventFragment object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const EventFragment& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::EventFragment object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const EventFragment& x) const;

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        eProsima_user_DllExport void id(
                const AMM::UUID& _id);

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        eProsima_user_DllExport void id(
                AMM::UUID&& _id);

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        eProsima_user_DllExport const AMM::UUID& id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport AMM::UUID& id();
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function copies the value in member educational_encounter
         * @param _educational_encounter New value to be copied in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                const AMM::UUID& _educational_encounter);

        /*!
         * @brief This function moves the value in member educational_encounter
         * @param _educational_encounter New value to be moved in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                AMM::UUID&& _educational_encounter);

        /*!
         * @brief This function returns a constant reference to member educational_encounter
         * @return Constant reference to member educational_encounter
         */
        eProsima_user_DllExport const AMM::UUID& educational_encounter() const;

        /*!
         * @brief This function returns a reference to member educational_encounter
         * @return Reference to member educational_encounter
         */
        eProsima_user_DllExport AMM::UUID& educational_encounter();
        /*!
         * @brief This function copies the value in member location
         * @param _location New value to be copied in member location
         */
        eProsima_user_DllExport void location(
                const AMM::FMA_Location& _location);

        /*!
         * @brief This function moves the value in member location
         * @param _location New value to be moved in member location
         */
        eProsima_user_DllExport void location(
                AMM::FMA_Location&& _location);

        /*!
         * @brief This function returns a constant reference to member location
         * @return Constant reference to member location
         */
        eProsima_user_DllExport const AMM::FMA_Location& location() const;

        /*!
         * @brief This function returns a reference to member location
         * @return Reference to member location
         */
        eProsima_user_DllExport AMM::FMA_Location& location();
        /*!
         * @brief This function sets a value in member agent_type
         * @param _agent_type New value for member agent_type
         */
        eProsima_user_DllExport void agent_type(
                AMM::EventAgentType _agent_type);

        /*!
         * @brief This function returns the value of member agent_type
         * @return Value of member agent_type
         */
        eProsima_user_DllExport AMM::EventAgentType agent_type() const;

        /*!
         * @brief This function returns a reference to member agent_type
         * @return Reference to member agent_type
         */
        eProsima_user_DllExport AMM::EventAgentType& agent_type();

        /*!
         * @brief This function copies the value in member agent_id
         * @param _agent_id New value to be copied in member agent_id
         */
        eProsima_user_DllExport void agent_id(
                const AMM::UUID& _agent_id);

        /*!
         * @brief This function moves the value in member agent_id
         * @param _agent_id New value to be moved in member agent_id
         */
        eProsima_user_DllExport void agent_id(
                AMM::UUID&& _agent_id);

        /*!
         * @brief This function returns a constant reference to member agent_id
         * @return Constant reference to member agent_id
         */
        eProsima_user_DllExport const AMM::UUID& agent_id() const;

        /*!
         * @brief This function returns a reference to member agent_id
         * @return Reference to member agent_id
         */
        eProsima_user_DllExport AMM::UUID& agent_id();
        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        eProsima_user_DllExport void type(
                const std::string& _type);

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        eProsima_user_DllExport void type(
                std::string&& _type);

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        eProsima_user_DllExport const std::string& type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport std::string& type();
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        eProsima_user_DllExport void data(
                const eprosima::fastrtps::fixed_string<4096>& _data);

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        eProsima_user_DllExport void data(
                eprosima::fastrtps::fixed_string<4096>&& _data);

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        eProsima_user_DllExport const eprosima::fastrtps::fixed_string<4096>& data() const;

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        eProsima_user_DllExport eprosima::fastrtps::fixed_string<4096>& data();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::EventFragment& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        AMM::UUID m_id;
        uint64_t m_timestamp;
        AMM::UUID m_educational_encounter;
        AMM::FMA_Location m_location;
        AMM::EventAgentType m_agent_type;
        AMM::UUID m_agent_id;
        std::string m_type;
        eprosima::fastrtps::fixed_string<4096> m_data;

    };
    /*!
     * @brief This class represents the structure EventRecord defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class EventRecord
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport EventRecord();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~EventRecord();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::EventRecord that will be copied.
         */
        eProsima_user_DllExport EventRecord(
                const EventRecord& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::EventRecord that will be copied.
         */
        eProsima_user_DllExport EventRecord(
                EventRecord&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::EventRecord that will be copied.
         */
        eProsima_user_DllExport EventRecord& operator =(
                const EventRecord& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::EventRecord that will be copied.
         */
        eProsima_user_DllExport EventRecord& operator =(
                EventRecord&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::EventRecord object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const EventRecord& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::EventRecord object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const EventRecord& x) const;

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        eProsima_user_DllExport void id(
                const AMM::UUID& _id);

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        eProsima_user_DllExport void id(
                AMM::UUID&& _id);

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        eProsima_user_DllExport const AMM::UUID& id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport AMM::UUID& id();
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function copies the value in member educational_encounter
         * @param _educational_encounter New value to be copied in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                const AMM::UUID& _educational_encounter);

        /*!
         * @brief This function moves the value in member educational_encounter
         * @param _educational_encounter New value to be moved in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                AMM::UUID&& _educational_encounter);

        /*!
         * @brief This function returns a constant reference to member educational_encounter
         * @return Constant reference to member educational_encounter
         */
        eProsima_user_DllExport const AMM::UUID& educational_encounter() const;

        /*!
         * @brief This function returns a reference to member educational_encounter
         * @return Reference to member educational_encounter
         */
        eProsima_user_DllExport AMM::UUID& educational_encounter();
        /*!
         * @brief This function copies the value in member location
         * @param _location New value to be copied in member location
         */
        eProsima_user_DllExport void location(
                const AMM::FMA_Location& _location);

        /*!
         * @brief This function moves the value in member location
         * @param _location New value to be moved in member location
         */
        eProsima_user_DllExport void location(
                AMM::FMA_Location&& _location);

        /*!
         * @brief This function returns a constant reference to member location
         * @return Constant reference to member location
         */
        eProsima_user_DllExport const AMM::FMA_Location& location() const;

        /*!
         * @brief This function returns a reference to member location
         * @return Reference to member location
         */
        eProsima_user_DllExport AMM::FMA_Location& location();
        /*!
         * @brief This function sets a value in member agent_type
         * @param _agent_type New value for member agent_type
         */
        eProsima_user_DllExport void agent_type(
                AMM::EventAgentType _agent_type);

        /*!
         * @brief This function returns the value of member agent_type
         * @return Value of member agent_type
         */
        eProsima_user_DllExport AMM::EventAgentType agent_type() const;

        /*!
         * @brief This function returns a reference to member agent_type
         * @return Reference to member agent_type
         */
        eProsima_user_DllExport AMM::EventAgentType& agent_type();

        /*!
         * @brief This function copies the value in member agent_id
         * @param _agent_id New value to be copied in member agent_id
         */
        eProsima_user_DllExport void agent_id(
                const AMM::UUID& _agent_id);

        /*!
         * @brief This function moves the value in member agent_id
         * @param _agent_id New value to be moved in member agent_id
         */
        eProsima_user_DllExport void agent_id(
                AMM::UUID&& _agent_id);

        /*!
         * @brief This function returns a constant reference to member agent_id
         * @return Constant reference to member agent_id
         */
        eProsima_user_DllExport const AMM::UUID& agent_id() const;

        /*!
         * @brief This function returns a reference to member agent_id
         * @return Reference to member agent_id
         */
        eProsima_user_DllExport AMM::UUID& agent_id();
        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        eProsima_user_DllExport void type(
                const std::string& _type);

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        eProsima_user_DllExport void type(
                std::string&& _type);

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        eProsima_user_DllExport const std::string& type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport std::string& type();
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        eProsima_user_DllExport void data(
                const eprosima::fastrtps::fixed_string<4096>& _data);

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        eProsima_user_DllExport void data(
                eprosima::fastrtps::fixed_string<4096>&& _data);

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        eProsima_user_DllExport const eprosima::fastrtps::fixed_string<4096>& data() const;

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        eProsima_user_DllExport eprosima::fastrtps::fixed_string<4096>& data();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::EventRecord& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        AMM::UUID m_id;
        uint64_t m_timestamp;
        AMM::UUID m_educational_encounter;
        AMM::FMA_Location m_location;
        AMM::EventAgentType m_agent_type;
        AMM::UUID m_agent_id;
        std::string m_type;
        eprosima::fastrtps::fixed_string<4096> m_data;

    };
    /*!
     * @brief This class represents the enumeration FAR_Status defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    enum FAR_Status : uint32_t
    {
        REQUESTING,
        ACCEPTED,
        REJECTED
    };
    /*!
     * @brief This class represents the structure FragmentAmendmentRequest defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class FragmentAmendmentRequest
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport FragmentAmendmentRequest();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~FragmentAmendmentRequest();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::FragmentAmendmentRequest that will be copied.
         */
        eProsima_user_DllExport FragmentAmendmentRequest(
                const FragmentAmendmentRequest& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::FragmentAmendmentRequest that will be copied.
         */
        eProsima_user_DllExport FragmentAmendmentRequest(
                FragmentAmendmentRequest&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::FragmentAmendmentRequest that will be copied.
         */
        eProsima_user_DllExport FragmentAmendmentRequest& operator =(
                const FragmentAmendmentRequest& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::FragmentAmendmentRequest that will be copied.
         */
        eProsima_user_DllExport FragmentAmendmentRequest& operator =(
                FragmentAmendmentRequest&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::FragmentAmendmentRequest object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const FragmentAmendmentRequest& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::FragmentAmendmentRequest object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const FragmentAmendmentRequest& x) const;

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        eProsima_user_DllExport void id(
                const AMM::UUID& _id);

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        eProsima_user_DllExport void id(
                AMM::UUID&& _id);

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        eProsima_user_DllExport const AMM::UUID& id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport AMM::UUID& id();
        /*!
         * @brief This function copies the value in member fragment_id
         * @param _fragment_id New value to be copied in member fragment_id
         */
        eProsima_user_DllExport void fragment_id(
                const AMM::UUID& _fragment_id);

        /*!
         * @brief This function moves the value in member fragment_id
         * @param _fragment_id New value to be moved in member fragment_id
         */
        eProsima_user_DllExport void fragment_id(
                AMM::UUID&& _fragment_id);

        /*!
         * @brief This function returns a constant reference to member fragment_id
         * @return Constant reference to member fragment_id
         */
        eProsima_user_DllExport const AMM::UUID& fragment_id() const;

        /*!
         * @brief This function returns a reference to member fragment_id
         * @return Reference to member fragment_id
         */
        eProsima_user_DllExport AMM::UUID& fragment_id();
        /*!
         * @brief This function sets a value in member status
         * @param _status New value for member status
         */
        eProsima_user_DllExport void status(
                AMM::FAR_Status _status);

        /*!
         * @brief This function returns the value of member status
         * @return Value of member status
         */
        eProsima_user_DllExport AMM::FAR_Status status() const;

        /*!
         * @brief This function returns a reference to member status
         * @return Reference to member status
         */
        eProsima_user_DllExport AMM::FAR_Status& status();

        /*!
         * @brief This function copies the value in member location
         * @param _location New value to be copied in member location
         */
        eProsima_user_DllExport void location(
                const AMM::FMA_Location& _location);

        /*!
         * @brief This function moves the value in member location
         * @param _location New value to be moved in member location
         */
        eProsima_user_DllExport void location(
                AMM::FMA_Location&& _location);

        /*!
         * @brief This function returns a constant reference to member location
         * @return Constant reference to member location
         */
        eProsima_user_DllExport const AMM::FMA_Location& location() const;

        /*!
         * @brief This function returns a reference to member location
         * @return Reference to member location
         */
        eProsima_user_DllExport AMM::FMA_Location& location();
        /*!
         * @brief This function sets a value in member agent_type
         * @param _agent_type New value for member agent_type
         */
        eProsima_user_DllExport void agent_type(
                AMM::EventAgentType _agent_type);

        /*!
         * @brief This function returns the value of member agent_type
         * @return Value of member agent_type
         */
        eProsima_user_DllExport AMM::EventAgentType agent_type() const;

        /*!
         * @brief This function returns a reference to member agent_type
         * @return Reference to member agent_type
         */
        eProsima_user_DllExport AMM::EventAgentType& agent_type();

        /*!
         * @brief This function copies the value in member agent_id
         * @param _agent_id New value to be copied in member agent_id
         */
        eProsima_user_DllExport void agent_id(
                const AMM::UUID& _agent_id);

        /*!
         * @brief This function moves the value in member agent_id
         * @param _agent_id New value to be moved in member agent_id
         */
        eProsima_user_DllExport void agent_id(
                AMM::UUID&& _agent_id);

        /*!
         * @brief This function returns a constant reference to member agent_id
         * @return Constant reference to member agent_id
         */
        eProsima_user_DllExport const AMM::UUID& agent_id() const;

        /*!
         * @brief This function returns a reference to member agent_id
         * @return Reference to member agent_id
         */
        eProsima_user_DllExport AMM::UUID& agent_id();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::FragmentAmendmentRequest& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        AMM::UUID m_id;
        AMM::UUID m_fragment_id;
        AMM::FAR_Status m_status;
        AMM::FMA_Location m_location;
        AMM::EventAgentType m_agent_type;
        AMM::UUID m_agent_id;

    };
    /*!
     * @brief This class represents the enumeration LogLevel defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    enum LogLevel : uint32_t
    {
        L_FATAL,
        L_ERROR,
        L_WARN,
        L_INFO,
        L_DEBUG,
        L_TRACE
    };
    /*!
     * @brief This class represents the structure Log defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class Log
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Log();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Log();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::Log that will be copied.
         */
        eProsima_user_DllExport Log(
                const Log& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::Log that will be copied.
         */
        eProsima_user_DllExport Log(
                Log&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::Log that will be copied.
         */
        eProsima_user_DllExport Log& operator =(
                const Log& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::Log that will be copied.
         */
        eProsima_user_DllExport Log& operator =(
                Log&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::Log object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const Log& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::Log object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const Log& x) const;

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function copies the value in member module_id
         * @param _module_id New value to be copied in member module_id
         */
        eProsima_user_DllExport void module_id(
                const AMM::UUID& _module_id);

        /*!
         * @brief This function moves the value in member module_id
         * @param _module_id New value to be moved in member module_id
         */
        eProsima_user_DllExport void module_id(
                AMM::UUID&& _module_id);

        /*!
         * @brief This function returns a constant reference to member module_id
         * @return Constant reference to member module_id
         */
        eProsima_user_DllExport const AMM::UUID& module_id() const;

        /*!
         * @brief This function returns a reference to member module_id
         * @return Reference to member module_id
         */
        eProsima_user_DllExport AMM::UUID& module_id();
        /*!
         * @brief This function sets a value in member level
         * @param _level New value for member level
         */
        eProsima_user_DllExport void level(
                AMM::LogLevel _level);

        /*!
         * @brief This function returns the value of member level
         * @return Value of member level
         */
        eProsima_user_DllExport AMM::LogLevel level() const;

        /*!
         * @brief This function returns a reference to member level
         * @return Reference to member level
         */
        eProsima_user_DllExport AMM::LogLevel& level();

        /*!
         * @brief This function copies the value in member message
         * @param _message New value to be copied in member message
         */
        eProsima_user_DllExport void message(
                const std::string& _message);

        /*!
         * @brief This function moves the value in member message
         * @param _message New value to be moved in member message
         */
        eProsima_user_DllExport void message(
                std::string&& _message);

        /*!
         * @brief This function returns a constant reference to member message
         * @return Constant reference to member message
         */
        eProsima_user_DllExport const std::string& message() const;

        /*!
         * @brief This function returns a reference to member message
         * @return Reference to member message
         */
        eProsima_user_DllExport std::string& message();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::Log& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        uint64_t m_timestamp;
        AMM::UUID m_module_id;
        AMM::LogLevel m_level;
        std::string m_message;

    };
    /*!
     * @brief This class represents the structure ModuleConfiguration defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class ModuleConfiguration
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ModuleConfiguration();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ModuleConfiguration();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::ModuleConfiguration that will be copied.
         */
        eProsima_user_DllExport ModuleConfiguration(
                const ModuleConfiguration& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::ModuleConfiguration that will be copied.
         */
        eProsima_user_DllExport ModuleConfiguration(
                ModuleConfiguration&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::ModuleConfiguration that will be copied.
         */
        eProsima_user_DllExport ModuleConfiguration& operator =(
                const ModuleConfiguration& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::ModuleConfiguration that will be copied.
         */
        eProsima_user_DllExport ModuleConfiguration& operator =(
                ModuleConfiguration&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::ModuleConfiguration object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ModuleConfiguration& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::ModuleConfiguration object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ModuleConfiguration& x) const;

        /*!
         * @brief This function copies the value in member name
         * @param _name New value to be copied in member name
         */
        eProsima_user_DllExport void name(
                const std::string& _name);

        /*!
         * @brief This function moves the value in member name
         * @param _name New value to be moved in member name
         */
        eProsima_user_DllExport void name(
                std::string&& _name);

        /*!
         * @brief This function returns a constant reference to member name
         * @return Constant reference to member name
         */
        eProsima_user_DllExport const std::string& name() const;

        /*!
         * @brief This function returns a reference to member name
         * @return Reference to member name
         */
        eProsima_user_DllExport std::string& name();
        /*!
         * @brief This function copies the value in member module_id
         * @param _module_id New value to be copied in member module_id
         */
        eProsima_user_DllExport void module_id(
                const AMM::UUID& _module_id);

        /*!
         * @brief This function moves the value in member module_id
         * @param _module_id New value to be moved in member module_id
         */
        eProsima_user_DllExport void module_id(
                AMM::UUID&& _module_id);

        /*!
         * @brief This function returns a constant reference to member module_id
         * @return Constant reference to member module_id
         */
        eProsima_user_DllExport const AMM::UUID& module_id() const;

        /*!
         * @brief This function returns a reference to member module_id
         * @return Reference to member module_id
         */
        eProsima_user_DllExport AMM::UUID& module_id();
        /*!
         * @brief This function copies the value in member educational_encounter
         * @param _educational_encounter New value to be copied in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                const AMM::UUID& _educational_encounter);

        /*!
         * @brief This function moves the value in member educational_encounter
         * @param _educational_encounter New value to be moved in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                AMM::UUID&& _educational_encounter);

        /*!
         * @brief This function returns a constant reference to member educational_encounter
         * @return Constant reference to member educational_encounter
         */
        eProsima_user_DllExport const AMM::UUID& educational_encounter() const;

        /*!
         * @brief This function returns a reference to member educational_encounter
         * @return Reference to member educational_encounter
         */
        eProsima_user_DllExport AMM::UUID& educational_encounter();
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function copies the value in member capabilities_configuration
         * @param _capabilities_configuration New value to be copied in member capabilities_configuration
         */
        eProsima_user_DllExport void capabilities_configuration(
                const eprosima::fastrtps::fixed_string<12000>& _capabilities_configuration);

        /*!
         * @brief This function moves the value in member capabilities_configuration
         * @param _capabilities_configuration New value to be moved in member capabilities_configuration
         */
        eProsima_user_DllExport void capabilities_configuration(
                eprosima::fastrtps::fixed_string<12000>&& _capabilities_configuration);

        /*!
         * @brief This function returns a constant reference to member capabilities_configuration
         * @return Constant reference to member capabilities_configuration
         */
        eProsima_user_DllExport const eprosima::fastrtps::fixed_string<12000>& capabilities_configuration() const;

        /*!
         * @brief This function returns a reference to member capabilities_configuration
         * @return Reference to member capabilities_configuration
         */
        eProsima_user_DllExport eprosima::fastrtps::fixed_string<12000>& capabilities_configuration();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::ModuleConfiguration& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        std::string m_name;
        AMM::UUID m_module_id;
        AMM::UUID m_educational_encounter;
        uint64_t m_timestamp;
        eprosima::fastrtps::fixed_string<12000> m_capabilities_configuration;

    };
    /*!
     * @brief This class represents the structure OmittedEvent defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class OmittedEvent
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport OmittedEvent();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~OmittedEvent();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::OmittedEvent that will be copied.
         */
        eProsima_user_DllExport OmittedEvent(
                const OmittedEvent& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::OmittedEvent that will be copied.
         */
        eProsima_user_DllExport OmittedEvent(
                OmittedEvent&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::OmittedEvent that will be copied.
         */
        eProsima_user_DllExport OmittedEvent& operator =(
                const OmittedEvent& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::OmittedEvent that will be copied.
         */
        eProsima_user_DllExport OmittedEvent& operator =(
                OmittedEvent&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::OmittedEvent object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const OmittedEvent& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::OmittedEvent object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const OmittedEvent& x) const;

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        eProsima_user_DllExport void id(
                const AMM::UUID& _id);

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        eProsima_user_DllExport void id(
                AMM::UUID&& _id);

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        eProsima_user_DllExport const AMM::UUID& id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport AMM::UUID& id();
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function copies the value in member educational_encounter
         * @param _educational_encounter New value to be copied in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                const AMM::UUID& _educational_encounter);

        /*!
         * @brief This function moves the value in member educational_encounter
         * @param _educational_encounter New value to be moved in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                AMM::UUID&& _educational_encounter);

        /*!
         * @brief This function returns a constant reference to member educational_encounter
         * @return Constant reference to member educational_encounter
         */
        eProsima_user_DllExport const AMM::UUID& educational_encounter() const;

        /*!
         * @brief This function returns a reference to member educational_encounter
         * @return Reference to member educational_encounter
         */
        eProsima_user_DllExport AMM::UUID& educational_encounter();
        /*!
         * @brief This function copies the value in member location
         * @param _location New value to be copied in member location
         */
        eProsima_user_DllExport void location(
                const AMM::FMA_Location& _location);

        /*!
         * @brief This function moves the value in member location
         * @param _location New value to be moved in member location
         */
        eProsima_user_DllExport void location(
                AMM::FMA_Location&& _location);

        /*!
         * @brief This function returns a constant reference to member location
         * @return Constant reference to member location
         */
        eProsima_user_DllExport const AMM::FMA_Location& location() const;

        /*!
         * @brief This function returns a reference to member location
         * @return Reference to member location
         */
        eProsima_user_DllExport AMM::FMA_Location& location();
        /*!
         * @brief This function sets a value in member agent_type
         * @param _agent_type New value for member agent_type
         */
        eProsima_user_DllExport void agent_type(
                AMM::EventAgentType _agent_type);

        /*!
         * @brief This function returns the value of member agent_type
         * @return Value of member agent_type
         */
        eProsima_user_DllExport AMM::EventAgentType agent_type() const;

        /*!
         * @brief This function returns a reference to member agent_type
         * @return Reference to member agent_type
         */
        eProsima_user_DllExport AMM::EventAgentType& agent_type();

        /*!
         * @brief This function copies the value in member agent_id
         * @param _agent_id New value to be copied in member agent_id
         */
        eProsima_user_DllExport void agent_id(
                const AMM::UUID& _agent_id);

        /*!
         * @brief This function moves the value in member agent_id
         * @param _agent_id New value to be moved in member agent_id
         */
        eProsima_user_DllExport void agent_id(
                AMM::UUID&& _agent_id);

        /*!
         * @brief This function returns a constant reference to member agent_id
         * @return Constant reference to member agent_id
         */
        eProsima_user_DllExport const AMM::UUID& agent_id() const;

        /*!
         * @brief This function returns a reference to member agent_id
         * @return Reference to member agent_id
         */
        eProsima_user_DllExport AMM::UUID& agent_id();
        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        eProsima_user_DllExport void type(
                const std::string& _type);

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        eProsima_user_DllExport void type(
                std::string&& _type);

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        eProsima_user_DllExport const std::string& type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport std::string& type();
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        eProsima_user_DllExport void data(
                const eprosima::fastrtps::fixed_string<4096>& _data);

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        eProsima_user_DllExport void data(
                eprosima::fastrtps::fixed_string<4096>&& _data);

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        eProsima_user_DllExport const eprosima::fastrtps::fixed_string<4096>& data() const;

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        eProsima_user_DllExport eprosima::fastrtps::fixed_string<4096>& data();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::OmittedEvent& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        AMM::UUID m_id;
        uint64_t m_timestamp;
        AMM::UUID m_educational_encounter;
        AMM::FMA_Location m_location;
        AMM::EventAgentType m_agent_type;
        AMM::UUID m_agent_id;
        std::string m_type;
        eprosima::fastrtps::fixed_string<4096> m_data;

    };
    /*!
     * @brief This class represents the structure Semantic_Version defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class Semantic_Version
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Semantic_Version();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Semantic_Version();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::Semantic_Version that will be copied.
         */
        eProsima_user_DllExport Semantic_Version(
                const Semantic_Version& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::Semantic_Version that will be copied.
         */
        eProsima_user_DllExport Semantic_Version(
                Semantic_Version&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::Semantic_Version that will be copied.
         */
        eProsima_user_DllExport Semantic_Version& operator =(
                const Semantic_Version& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::Semantic_Version that will be copied.
         */
        eProsima_user_DllExport Semantic_Version& operator =(
                Semantic_Version&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::Semantic_Version object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const Semantic_Version& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::Semantic_Version object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const Semantic_Version& x) const;

        /*!
         * @brief This function sets a value in member major
         * @param _major New value for member major
         */
        eProsima_user_DllExport void major(
                uint16_t _major);

        /*!
         * @brief This function returns the value of member major
         * @return Value of member major
         */
        eProsima_user_DllExport uint16_t major() const;

        /*!
         * @brief This function returns a reference to member major
         * @return Reference to member major
         */
        eProsima_user_DllExport uint16_t& major();

        /*!
         * @brief This function sets a value in member minor
         * @param _minor New value for member minor
         */
        eProsima_user_DllExport void minor(
                uint16_t _minor);

        /*!
         * @brief This function returns the value of member minor
         * @return Value of member minor
         */
        eProsima_user_DllExport uint16_t minor() const;

        /*!
         * @brief This function returns a reference to member minor
         * @return Reference to member minor
         */
        eProsima_user_DllExport uint16_t& minor();

        /*!
         * @brief This function sets a value in member patch
         * @param _patch New value for member patch
         */
        eProsima_user_DllExport void patch(
                uint16_t _patch);

        /*!
         * @brief This function returns the value of member patch
         * @return Value of member patch
         */
        eProsima_user_DllExport uint16_t patch() const;

        /*!
         * @brief This function returns a reference to member patch
         * @return Reference to member patch
         */
        eProsima_user_DllExport uint16_t& patch();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::Semantic_Version& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        uint16_t m_major;
        uint16_t m_minor;
        uint16_t m_patch;

    };
    /*!
     * @brief This class represents the structure OperationalDescription defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class OperationalDescription
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport OperationalDescription();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~OperationalDescription();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::OperationalDescription that will be copied.
         */
        eProsima_user_DllExport OperationalDescription(
                const OperationalDescription& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::OperationalDescription that will be copied.
         */
        eProsima_user_DllExport OperationalDescription(
                OperationalDescription&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::OperationalDescription that will be copied.
         */
        eProsima_user_DllExport OperationalDescription& operator =(
                const OperationalDescription& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::OperationalDescription that will be copied.
         */
        eProsima_user_DllExport OperationalDescription& operator =(
                OperationalDescription&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::OperationalDescription object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const OperationalDescription& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::OperationalDescription object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const OperationalDescription& x) const;

        /*!
         * @brief This function copies the value in member name
         * @param _name New value to be copied in member name
         */
        eProsima_user_DllExport void name(
                const std::string& _name);

        /*!
         * @brief This function moves the value in member name
         * @param _name New value to be moved in member name
         */
        eProsima_user_DllExport void name(
                std::string&& _name);

        /*!
         * @brief This function returns a constant reference to member name
         * @return Constant reference to member name
         */
        eProsima_user_DllExport const std::string& name() const;

        /*!
         * @brief This function returns a reference to member name
         * @return Reference to member name
         */
        eProsima_user_DllExport std::string& name();
        /*!
         * @brief This function copies the value in member description
         * @param _description New value to be copied in member description
         */
        eProsima_user_DllExport void description(
                const std::string& _description);

        /*!
         * @brief This function moves the value in member description
         * @param _description New value to be moved in member description
         */
        eProsima_user_DllExport void description(
                std::string&& _description);

        /*!
         * @brief This function returns a constant reference to member description
         * @return Constant reference to member description
         */
        eProsima_user_DllExport const std::string& description() const;

        /*!
         * @brief This function returns a reference to member description
         * @return Reference to member description
         */
        eProsima_user_DllExport std::string& description();
        /*!
         * @brief This function copies the value in member manufacturer
         * @param _manufacturer New value to be copied in member manufacturer
         */
        eProsima_user_DllExport void manufacturer(
                const std::string& _manufacturer);

        /*!
         * @brief This function moves the value in member manufacturer
         * @param _manufacturer New value to be moved in member manufacturer
         */
        eProsima_user_DllExport void manufacturer(
                std::string&& _manufacturer);

        /*!
         * @brief This function returns a constant reference to member manufacturer
         * @return Constant reference to member manufacturer
         */
        eProsima_user_DllExport const std::string& manufacturer() const;

        /*!
         * @brief This function returns a reference to member manufacturer
         * @return Reference to member manufacturer
         */
        eProsima_user_DllExport std::string& manufacturer();
        /*!
         * @brief This function copies the value in member model
         * @param _model New value to be copied in member model
         */
        eProsima_user_DllExport void model(
                const std::string& _model);

        /*!
         * @brief This function moves the value in member model
         * @param _model New value to be moved in member model
         */
        eProsima_user_DllExport void model(
                std::string&& _model);

        /*!
         * @brief This function returns a constant reference to member model
         * @return Constant reference to member model
         */
        eProsima_user_DllExport const std::string& model() const;

        /*!
         * @brief This function returns a reference to member model
         * @return Reference to member model
         */
        eProsima_user_DllExport std::string& model();
        /*!
         * @brief This function copies the value in member serial_number
         * @param _serial_number New value to be copied in member serial_number
         */
        eProsima_user_DllExport void serial_number(
                const std::string& _serial_number);

        /*!
         * @brief This function moves the value in member serial_number
         * @param _serial_number New value to be moved in member serial_number
         */
        eProsima_user_DllExport void serial_number(
                std::string&& _serial_number);

        /*!
         * @brief This function returns a constant reference to member serial_number
         * @return Constant reference to member serial_number
         */
        eProsima_user_DllExport const std::string& serial_number() const;

        /*!
         * @brief This function returns a reference to member serial_number
         * @return Reference to member serial_number
         */
        eProsima_user_DllExport std::string& serial_number();
        /*!
         * @brief This function copies the value in member module_id
         * @param _module_id New value to be copied in member module_id
         */
        eProsima_user_DllExport void module_id(
                const AMM::UUID& _module_id);

        /*!
         * @brief This function moves the value in member module_id
         * @param _module_id New value to be moved in member module_id
         */
        eProsima_user_DllExport void module_id(
                AMM::UUID&& _module_id);

        /*!
         * @brief This function returns a constant reference to member module_id
         * @return Constant reference to member module_id
         */
        eProsima_user_DllExport const AMM::UUID& module_id() const;

        /*!
         * @brief This function returns a reference to member module_id
         * @return Reference to member module_id
         */
        eProsima_user_DllExport AMM::UUID& module_id();
        /*!
         * @brief This function copies the value in member module_version
         * @param _module_version New value to be copied in member module_version
         */
        eProsima_user_DllExport void module_version(
                const std::string& _module_version);

        /*!
         * @brief This function moves the value in member module_version
         * @param _module_version New value to be moved in member module_version
         */
        eProsima_user_DllExport void module_version(
                std::string&& _module_version);

        /*!
         * @brief This function returns a constant reference to member module_version
         * @return Constant reference to member module_version
         */
        eProsima_user_DllExport const std::string& module_version() const;

        /*!
         * @brief This function returns a reference to member module_version
         * @return Reference to member module_version
         */
        eProsima_user_DllExport std::string& module_version();
        /*!
         * @brief This function copies the value in member configuration_version
         * @param _configuration_version New value to be copied in member configuration_version
         */
        eProsima_user_DllExport void configuration_version(
                const std::string& _configuration_version);

        /*!
         * @brief This function moves the value in member configuration_version
         * @param _configuration_version New value to be moved in member configuration_version
         */
        eProsima_user_DllExport void configuration_version(
                std::string&& _configuration_version);

        /*!
         * @brief This function returns a constant reference to member configuration_version
         * @return Constant reference to member configuration_version
         */
        eProsima_user_DllExport const std::string& configuration_version() const;

        /*!
         * @brief This function returns a reference to member configuration_version
         * @return Reference to member configuration_version
         */
        eProsima_user_DllExport std::string& configuration_version();
        /*!
         * @brief This function copies the value in member AMM_version
         * @param _AMM_version New value to be copied in member AMM_version
         */
        eProsima_user_DllExport void AMM_version(
                const std::string& _AMM_version);

        /*!
         * @brief This function moves the value in member AMM_version
         * @param _AMM_version New value to be moved in member AMM_version
         */
        eProsima_user_DllExport void AMM_version(
                std::string&& _AMM_version);

        /*!
         * @brief This function returns a constant reference to member AMM_version
         * @return Constant reference to member AMM_version
         */
        eProsima_user_DllExport const std::string& AMM_version() const;

        /*!
         * @brief This function returns a reference to member AMM_version
         * @return Reference to member AMM_version
         */
        eProsima_user_DllExport std::string& AMM_version();
        /*!
         * @brief This function copies the value in member ip_address
         * @param _ip_address New value to be copied in member ip_address
         */
        eProsima_user_DllExport void ip_address(
                const std::array<uint8_t, 4>& _ip_address);

        /*!
         * @brief This function moves the value in member ip_address
         * @param _ip_address New value to be moved in member ip_address
         */
        eProsima_user_DllExport void ip_address(
                std::array<uint8_t, 4>&& _ip_address);

        /*!
         * @brief This function returns a constant reference to member ip_address
         * @return Constant reference to member ip_address
         */
        eProsima_user_DllExport const std::array<uint8_t, 4>& ip_address() const;

        /*!
         * @brief This function returns a reference to member ip_address
         * @return Reference to member ip_address
         */
        eProsima_user_DllExport std::array<uint8_t, 4>& ip_address();
        /*!
         * @brief This function copies the value in member capabilities_schema
         * @param _capabilities_schema New value to be copied in member capabilities_schema
         */
        eProsima_user_DllExport void capabilities_schema(
                const eprosima::fastrtps::fixed_string<12000>& _capabilities_schema);

        /*!
         * @brief This function moves the value in member capabilities_schema
         * @param _capabilities_schema New value to be moved in member capabilities_schema
         */
        eProsima_user_DllExport void capabilities_schema(
                eprosima::fastrtps::fixed_string<12000>&& _capabilities_schema);

        /*!
         * @brief This function returns a constant reference to member capabilities_schema
         * @return Constant reference to member capabilities_schema
         */
        eProsima_user_DllExport const eprosima::fastrtps::fixed_string<12000>& capabilities_schema() const;

        /*!
         * @brief This function returns a reference to member capabilities_schema
         * @return Reference to member capabilities_schema
         */
        eProsima_user_DllExport eprosima::fastrtps::fixed_string<12000>& capabilities_schema();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::OperationalDescription& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        std::string m_name;
        std::string m_description;
        std::string m_manufacturer;
        std::string m_model;
        std::string m_serial_number;
        AMM::UUID m_module_id;
        std::string m_module_version;
        std::string m_configuration_version;
        std::string m_AMM_version;
        std::array<uint8_t, 4> m_ip_address;
        eprosima::fastrtps::fixed_string<12000> m_capabilities_schema;

    };
    /*!
     * @brief This class represents the structure PhysiologyModification defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class PhysiologyModification
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PhysiologyModification();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PhysiologyModification();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::PhysiologyModification that will be copied.
         */
        eProsima_user_DllExport PhysiologyModification(
                const PhysiologyModification& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::PhysiologyModification that will be copied.
         */
        eProsima_user_DllExport PhysiologyModification(
                PhysiologyModification&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::PhysiologyModification that will be copied.
         */
        eProsima_user_DllExport PhysiologyModification& operator =(
                const PhysiologyModification& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::PhysiologyModification that will be copied.
         */
        eProsima_user_DllExport PhysiologyModification& operator =(
                PhysiologyModification&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::PhysiologyModification object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const PhysiologyModification& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::PhysiologyModification object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const PhysiologyModification& x) const;

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        eProsima_user_DllExport void id(
                const AMM::UUID& _id);

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        eProsima_user_DllExport void id(
                AMM::UUID&& _id);

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        eProsima_user_DllExport const AMM::UUID& id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport AMM::UUID& id();
        /*!
         * @brief This function copies the value in member event_id
         * @param _event_id New value to be copied in member event_id
         */
        eProsima_user_DllExport void event_id(
                const AMM::UUID& _event_id);

        /*!
         * @brief This function moves the value in member event_id
         * @param _event_id New value to be moved in member event_id
         */
        eProsima_user_DllExport void event_id(
                AMM::UUID&& _event_id);

        /*!
         * @brief This function returns a constant reference to member event_id
         * @return Constant reference to member event_id
         */
        eProsima_user_DllExport const AMM::UUID& event_id() const;

        /*!
         * @brief This function returns a reference to member event_id
         * @return Reference to member event_id
         */
        eProsima_user_DllExport AMM::UUID& event_id();
        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        eProsima_user_DllExport void type(
                const std::string& _type);

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        eProsima_user_DllExport void type(
                std::string&& _type);

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        eProsima_user_DllExport const std::string& type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport std::string& type();
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        eProsima_user_DllExport void data(
                const eprosima::fastrtps::fixed_string<4096>& _data);

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        eProsima_user_DllExport void data(
                eprosima::fastrtps::fixed_string<4096>&& _data);

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        eProsima_user_DllExport const eprosima::fastrtps::fixed_string<4096>& data() const;

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        eProsima_user_DllExport eprosima::fastrtps::fixed_string<4096>& data();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::PhysiologyModification& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        AMM::UUID m_id;
        AMM::UUID m_event_id;
        std::string m_type;
        eprosima::fastrtps::fixed_string<4096> m_data;

    };
    /*!
     * @brief This class represents the structure PhysiologyValue defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class PhysiologyValue
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PhysiologyValue();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PhysiologyValue();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::PhysiologyValue that will be copied.
         */
        eProsima_user_DllExport PhysiologyValue(
                const PhysiologyValue& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::PhysiologyValue that will be copied.
         */
        eProsima_user_DllExport PhysiologyValue(
                PhysiologyValue&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::PhysiologyValue that will be copied.
         */
        eProsima_user_DllExport PhysiologyValue& operator =(
                const PhysiologyValue& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::PhysiologyValue that will be copied.
         */
        eProsima_user_DllExport PhysiologyValue& operator =(
                PhysiologyValue&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::PhysiologyValue object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const PhysiologyValue& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::PhysiologyValue object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const PhysiologyValue& x) const;

        /*!
         * @brief This function copies the value in member educational_encounter
         * @param _educational_encounter New value to be copied in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                const AMM::UUID& _educational_encounter);

        /*!
         * @brief This function moves the value in member educational_encounter
         * @param _educational_encounter New value to be moved in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                AMM::UUID&& _educational_encounter);

        /*!
         * @brief This function returns a constant reference to member educational_encounter
         * @return Constant reference to member educational_encounter
         */
        eProsima_user_DllExport const AMM::UUID& educational_encounter() const;

        /*!
         * @brief This function returns a reference to member educational_encounter
         * @return Reference to member educational_encounter
         */
        eProsima_user_DllExport AMM::UUID& educational_encounter();
        /*!
         * @brief This function sets a value in member simulation_time
         * @param _simulation_time New value for member simulation_time
         */
        eProsima_user_DllExport void simulation_time(
                int64_t _simulation_time);

        /*!
         * @brief This function returns the value of member simulation_time
         * @return Value of member simulation_time
         */
        eProsima_user_DllExport int64_t simulation_time() const;

        /*!
         * @brief This function returns a reference to member simulation_time
         * @return Reference to member simulation_time
         */
        eProsima_user_DllExport int64_t& simulation_time();

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function copies the value in member name
         * @param _name New value to be copied in member name
         */
        eProsima_user_DllExport void name(
                const std::string& _name);

        /*!
         * @brief This function moves the value in member name
         * @param _name New value to be moved in member name
         */
        eProsima_user_DllExport void name(
                std::string&& _name);

        /*!
         * @brief This function returns a constant reference to member name
         * @return Constant reference to member name
         */
        eProsima_user_DllExport const std::string& name() const;

        /*!
         * @brief This function returns a reference to member name
         * @return Reference to member name
         */
        eProsima_user_DllExport std::string& name();
        /*!
         * @brief This function copies the value in member unit
         * @param _unit New value to be copied in member unit
         */
        eProsima_user_DllExport void unit(
                const std::string& _unit);

        /*!
         * @brief This function moves the value in member unit
         * @param _unit New value to be moved in member unit
         */
        eProsima_user_DllExport void unit(
                std::string&& _unit);

        /*!
         * @brief This function returns a constant reference to member unit
         * @return Constant reference to member unit
         */
        eProsima_user_DllExport const std::string& unit() const;

        /*!
         * @brief This function returns a reference to member unit
         * @return Reference to member unit
         */
        eProsima_user_DllExport std::string& unit();
        /*!
         * @brief This function sets a value in member value
         * @param _value New value for member value
         */
        eProsima_user_DllExport void value(
                double _value);

        /*!
         * @brief This function returns the value of member value
         * @return Value of member value
         */
        eProsima_user_DllExport double value() const;

        /*!
         * @brief This function returns a reference to member value
         * @return Reference to member value
         */
        eProsima_user_DllExport double& value();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::PhysiologyValue& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        AMM::UUID m_educational_encounter;
        int64_t m_simulation_time;
        uint64_t m_timestamp;
        std::string m_name;
        std::string m_unit;
        double m_value;

    };
    /*!
     * @brief This class represents the structure PhysiologyWaveform defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class PhysiologyWaveform
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PhysiologyWaveform();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PhysiologyWaveform();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::PhysiologyWaveform that will be copied.
         */
        eProsima_user_DllExport PhysiologyWaveform(
                const PhysiologyWaveform& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::PhysiologyWaveform that will be copied.
         */
        eProsima_user_DllExport PhysiologyWaveform(
                PhysiologyWaveform&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::PhysiologyWaveform that will be copied.
         */
        eProsima_user_DllExport PhysiologyWaveform& operator =(
                const PhysiologyWaveform& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::PhysiologyWaveform that will be copied.
         */
        eProsima_user_DllExport PhysiologyWaveform& operator =(
                PhysiologyWaveform&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::PhysiologyWaveform object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const PhysiologyWaveform& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::PhysiologyWaveform object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const PhysiologyWaveform& x) const;

        /*!
         * @brief This function copies the value in member educational_encounter
         * @param _educational_encounter New value to be copied in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                const AMM::UUID& _educational_encounter);

        /*!
         * @brief This function moves the value in member educational_encounter
         * @param _educational_encounter New value to be moved in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                AMM::UUID&& _educational_encounter);

        /*!
         * @brief This function returns a constant reference to member educational_encounter
         * @return Constant reference to member educational_encounter
         */
        eProsima_user_DllExport const AMM::UUID& educational_encounter() const;

        /*!
         * @brief This function returns a reference to member educational_encounter
         * @return Reference to member educational_encounter
         */
        eProsima_user_DllExport AMM::UUID& educational_encounter();
        /*!
         * @brief This function sets a value in member simulation_time
         * @param _simulation_time New value for member simulation_time
         */
        eProsima_user_DllExport void simulation_time(
                int64_t _simulation_time);

        /*!
         * @brief This function returns the value of member simulation_time
         * @return Value of member simulation_time
         */
        eProsima_user_DllExport int64_t simulation_time() const;

        /*!
         * @brief This function returns a reference to member simulation_time
         * @return Reference to member simulation_time
         */
        eProsima_user_DllExport int64_t& simulation_time();

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function copies the value in member name
         * @param _name New value to be copied in member name
         */
        eProsima_user_DllExport void name(
                const std::string& _name);

        /*!
         * @brief This function moves the value in member name
         * @param _name New value to be moved in member name
         */
        eProsima_user_DllExport void name(
                std::string&& _name);

        /*!
         * @brief This function returns a constant reference to member name
         * @return Constant reference to member name
         */
        eProsima_user_DllExport const std::string& name() const;

        /*!
         * @brief This function returns a reference to member name
         * @return Reference to member name
         */
        eProsima_user_DllExport std::string& name();
        /*!
         * @brief This function copies the value in member unit
         * @param _unit New value to be copied in member unit
         */
        eProsima_user_DllExport void unit(
                const std::string& _unit);

        /*!
         * @brief This function moves the value in member unit
         * @param _unit New value to be moved in member unit
         */
        eProsima_user_DllExport void unit(
                std::string&& _unit);

        /*!
         * @brief This function returns a constant reference to member unit
         * @return Constant reference to member unit
         */
        eProsima_user_DllExport const std::string& unit() const;

        /*!
         * @brief This function returns a reference to member unit
         * @return Reference to member unit
         */
        eProsima_user_DllExport std::string& unit();
        /*!
         * @brief This function sets a value in member value
         * @param _value New value for member value
         */
        eProsima_user_DllExport void value(
                double _value);

        /*!
         * @brief This function returns the value of member value
         * @return Value of member value
         */
        eProsima_user_DllExport double value() const;

        /*!
         * @brief This function returns a reference to member value
         * @return Reference to member value
         */
        eProsima_user_DllExport double& value();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::PhysiologyWaveform& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        AMM::UUID m_educational_encounter;
        int64_t m_simulation_time;
        uint64_t m_timestamp;
        std::string m_name;
        std::string m_unit;
        double m_value;

    };
    /*!
     * @brief This class represents the structure RenderModification defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class RenderModification
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport RenderModification();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~RenderModification();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::RenderModification that will be copied.
         */
        eProsima_user_DllExport RenderModification(
                const RenderModification& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::RenderModification that will be copied.
         */
        eProsima_user_DllExport RenderModification(
                RenderModification&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::RenderModification that will be copied.
         */
        eProsima_user_DllExport RenderModification& operator =(
                const RenderModification& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::RenderModification that will be copied.
         */
        eProsima_user_DllExport RenderModification& operator =(
                RenderModification&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::RenderModification object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const RenderModification& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::RenderModification object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const RenderModification& x) const;

        /*!
         * @brief This function copies the value in member id
         * @param _id New value to be copied in member id
         */
        eProsima_user_DllExport void id(
                const AMM::UUID& _id);

        /*!
         * @brief This function moves the value in member id
         * @param _id New value to be moved in member id
         */
        eProsima_user_DllExport void id(
                AMM::UUID&& _id);

        /*!
         * @brief This function returns a constant reference to member id
         * @return Constant reference to member id
         */
        eProsima_user_DllExport const AMM::UUID& id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport AMM::UUID& id();
        /*!
         * @brief This function copies the value in member event_id
         * @param _event_id New value to be copied in member event_id
         */
        eProsima_user_DllExport void event_id(
                const AMM::UUID& _event_id);

        /*!
         * @brief This function moves the value in member event_id
         * @param _event_id New value to be moved in member event_id
         */
        eProsima_user_DllExport void event_id(
                AMM::UUID&& _event_id);

        /*!
         * @brief This function returns a constant reference to member event_id
         * @return Constant reference to member event_id
         */
        eProsima_user_DllExport const AMM::UUID& event_id() const;

        /*!
         * @brief This function returns a reference to member event_id
         * @return Reference to member event_id
         */
        eProsima_user_DllExport AMM::UUID& event_id();
        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        eProsima_user_DllExport void type(
                const std::string& _type);

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        eProsima_user_DllExport void type(
                std::string&& _type);

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        eProsima_user_DllExport const std::string& type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport std::string& type();
        /*!
         * @brief This function copies the value in member data
         * @param _data New value to be copied in member data
         */
        eProsima_user_DllExport void data(
                const eprosima::fastrtps::fixed_string<4096>& _data);

        /*!
         * @brief This function moves the value in member data
         * @param _data New value to be moved in member data
         */
        eProsima_user_DllExport void data(
                eprosima::fastrtps::fixed_string<4096>&& _data);

        /*!
         * @brief This function returns a constant reference to member data
         * @return Constant reference to member data
         */
        eProsima_user_DllExport const eprosima::fastrtps::fixed_string<4096>& data() const;

        /*!
         * @brief This function returns a reference to member data
         * @return Reference to member data
         */
        eProsima_user_DllExport eprosima::fastrtps::fixed_string<4096>& data();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::RenderModification& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        AMM::UUID m_id;
        AMM::UUID m_event_id;
        std::string m_type;
        eprosima::fastrtps::fixed_string<4096> m_data;

    };
    /*!
     * @brief This class represents the enumeration ControlType defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    enum ControlType : uint32_t
    {
        RUN,
        HALT,
        RESET,
        SAVE
    };
    /*!
     * @brief This class represents the structure SimulationControl defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class SimulationControl
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport SimulationControl();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~SimulationControl();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::SimulationControl that will be copied.
         */
        eProsima_user_DllExport SimulationControl(
                const SimulationControl& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::SimulationControl that will be copied.
         */
        eProsima_user_DllExport SimulationControl(
                SimulationControl&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::SimulationControl that will be copied.
         */
        eProsima_user_DllExport SimulationControl& operator =(
                const SimulationControl& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::SimulationControl that will be copied.
         */
        eProsima_user_DllExport SimulationControl& operator =(
                SimulationControl&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::SimulationControl object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const SimulationControl& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::SimulationControl object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const SimulationControl& x) const;

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function sets a value in member type
         * @param _type New value for member type
         */
        eProsima_user_DllExport void type(
                AMM::ControlType _type);

        /*!
         * @brief This function returns the value of member type
         * @return Value of member type
         */
        eProsima_user_DllExport AMM::ControlType type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport AMM::ControlType& type();

        /*!
         * @brief This function copies the value in member educational_encounter
         * @param _educational_encounter New value to be copied in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                const AMM::UUID& _educational_encounter);

        /*!
         * @brief This function moves the value in member educational_encounter
         * @param _educational_encounter New value to be moved in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                AMM::UUID&& _educational_encounter);

        /*!
         * @brief This function returns a constant reference to member educational_encounter
         * @return Constant reference to member educational_encounter
         */
        eProsima_user_DllExport const AMM::UUID& educational_encounter() const;

        /*!
         * @brief This function returns a reference to member educational_encounter
         * @return Reference to member educational_encounter
         */
        eProsima_user_DllExport AMM::UUID& educational_encounter();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::SimulationControl& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        uint64_t m_timestamp;
        AMM::ControlType m_type;
        AMM::UUID m_educational_encounter;

    };
    /*!
     * @brief This class represents the enumeration StatusValue defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    enum StatusValue : uint32_t
    {
        OPERATIONAL,
        INOPERATIVE,
        EXIGENT
    };
    /*!
     * @brief This class represents the structure Status defined by the user in the IDL file.
     * @ingroup AMM_STANDARD
     */
    class Status
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Status();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Status();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object AMM::Status that will be copied.
         */
        eProsima_user_DllExport Status(
                const Status& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object AMM::Status that will be copied.
         */
        eProsima_user_DllExport Status(
                Status&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object AMM::Status that will be copied.
         */
        eProsima_user_DllExport Status& operator =(
                const Status& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object AMM::Status that will be copied.
         */
        eProsima_user_DllExport Status& operator =(
                Status&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x AMM::Status object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const Status& x) const;

        /*!
         * @brief Comparison operator.
         * @param x AMM::Status object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const Status& x) const;

        /*!
         * @brief This function copies the value in member module_id
         * @param _module_id New value to be copied in member module_id
         */
        eProsima_user_DllExport void module_id(
                const AMM::UUID& _module_id);

        /*!
         * @brief This function moves the value in member module_id
         * @param _module_id New value to be moved in member module_id
         */
        eProsima_user_DllExport void module_id(
                AMM::UUID&& _module_id);

        /*!
         * @brief This function returns a constant reference to member module_id
         * @return Constant reference to member module_id
         */
        eProsima_user_DllExport const AMM::UUID& module_id() const;

        /*!
         * @brief This function returns a reference to member module_id
         * @return Reference to member module_id
         */
        eProsima_user_DllExport AMM::UUID& module_id();
        /*!
         * @brief This function copies the value in member module_name
         * @param _module_name New value to be copied in member module_name
         */
        eProsima_user_DllExport void module_name(
                const std::string& _module_name);

        /*!
         * @brief This function moves the value in member module_name
         * @param _module_name New value to be moved in member module_name
         */
        eProsima_user_DllExport void module_name(
                std::string&& _module_name);

        /*!
         * @brief This function returns a constant reference to member module_name
         * @return Constant reference to member module_name
         */
        eProsima_user_DllExport const std::string& module_name() const;

        /*!
         * @brief This function returns a reference to member module_name
         * @return Reference to member module_name
         */
        eProsima_user_DllExport std::string& module_name();
        /*!
         * @brief This function copies the value in member educational_encounter
         * @param _educational_encounter New value to be copied in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                const AMM::UUID& _educational_encounter);

        /*!
         * @brief This function moves the value in member educational_encounter
         * @param _educational_encounter New value to be moved in member educational_encounter
         */
        eProsima_user_DllExport void educational_encounter(
                AMM::UUID&& _educational_encounter);

        /*!
         * @brief This function returns a constant reference to member educational_encounter
         * @return Constant reference to member educational_encounter
         */
        eProsima_user_DllExport const AMM::UUID& educational_encounter() const;

        /*!
         * @brief This function returns a reference to member educational_encounter
         * @return Reference to member educational_encounter
         */
        eProsima_user_DllExport AMM::UUID& educational_encounter();
        /*!
         * @brief This function copies the value in member capability
         * @param _capability New value to be copied in member capability
         */
        eProsima_user_DllExport void capability(
                const std::string& _capability);

        /*!
         * @brief This function moves the value in member capability
         * @param _capability New value to be moved in member capability
         */
        eProsima_user_DllExport void capability(
                std::string&& _capability);

        /*!
         * @brief This function returns a constant reference to member capability
         * @return Constant reference to member capability
         */
        eProsima_user_DllExport const std::string& capability() const;

        /*!
         * @brief This function returns a reference to member capability
         * @return Reference to member capability
         */
        eProsima_user_DllExport std::string& capability();
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function sets a value in member value
         * @param _value New value for member value
         */
        eProsima_user_DllExport void value(
                AMM::StatusValue _value);

        /*!
         * @brief This function returns the value of member value
         * @return Value of member value
         */
        eProsima_user_DllExport AMM::StatusValue value() const;

        /*!
         * @brief This function returns a reference to member value
         * @return Reference to member value
         */
        eProsima_user_DllExport AMM::StatusValue& value();

        /*!
         * @brief This function copies the value in member message
         * @param _message New value to be copied in member message
         */
        eProsima_user_DllExport void message(
                const std::string& _message);

        /*!
         * @brief This function moves the value in member message
         * @param _message New value to be moved in member message
         */
        eProsima_user_DllExport void message(
                std::string&& _message);

        /*!
         * @brief This function returns a constant reference to member message
         * @return Constant reference to member message
         */
        eProsima_user_DllExport const std::string& message() const;

        /*!
         * @brief This function returns a reference to member message
         * @return Reference to member message
         */
        eProsima_user_DllExport std::string& message();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const AMM::Status& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        AMM::UUID m_module_id;
        std::string m_module_name;
        AMM::UUID m_educational_encounter;
        std::string m_capability;
        uint64_t m_timestamp;
        AMM::StatusValue m_value;
        std::string m_message;

    };
} // namespace AMM

#endif // _FAST_DDS_GENERATED_AMM_AMM_STANDARD_H_