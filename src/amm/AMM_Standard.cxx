// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AMM_Standard.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "AMM_Standard.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace AMM {



FMA_Location::FMA_Location()
{
}

FMA_Location::~FMA_Location()
{
}

FMA_Location::FMA_Location(
        const FMA_Location& x)
{
    m_FMAID = x.m_FMAID;
    m_name = x.m_name;
}

FMA_Location::FMA_Location(
        FMA_Location&& x) noexcept
{
    m_FMAID = x.m_FMAID;
    m_name = std::move(x.m_name);
}

FMA_Location& FMA_Location::operator =(
        const FMA_Location& x)
{

    m_FMAID = x.m_FMAID;
    m_name = x.m_name;
    return *this;
}

FMA_Location& FMA_Location::operator =(
        FMA_Location&& x) noexcept
{

    m_FMAID = x.m_FMAID;
    m_name = std::move(x.m_name);
    return *this;
}

bool FMA_Location::operator ==(
        const FMA_Location& x) const
{
    return (m_FMAID == x.m_FMAID &&
           m_name == x.m_name);
}

bool FMA_Location::operator !=(
        const FMA_Location& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member FMAID
 * @param _FMAID New value for member FMAID
 */
void FMA_Location::FMAID(
        int32_t _FMAID)
{
    m_FMAID = _FMAID;
}

/*!
 * @brief This function returns the value of member FMAID
 * @return Value of member FMAID
 */
int32_t FMA_Location::FMAID() const
{
    return m_FMAID;
}

/*!
 * @brief This function returns a reference to member FMAID
 * @return Reference to member FMAID
 */
int32_t& FMA_Location::FMAID()
{
    return m_FMAID;
}


/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void FMA_Location::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void FMA_Location::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& FMA_Location::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& FMA_Location::name()
{
    return m_name;
}




UUID::UUID()
{
}

UUID::~UUID()
{
}

UUID::UUID(
        const UUID& x)
{
    m_id = x.m_id;
}

UUID::UUID(
        UUID&& x) noexcept
{
    m_id = std::move(x.m_id);
}

UUID& UUID::operator =(
        const UUID& x)
{

    m_id = x.m_id;
    return *this;
}

UUID& UUID::operator =(
        UUID&& x) noexcept
{

    m_id = std::move(x.m_id);
    return *this;
}

bool UUID::operator ==(
        const UUID& x) const
{
    return (m_id == x.m_id);
}

bool UUID::operator !=(
        const UUID& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void UUID::id(
        const std::string& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void UUID::id(
        std::string&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const std::string& UUID::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
std::string& UUID::id()
{
    return m_id;
}





Assessment::Assessment()
{
}

Assessment::~Assessment()
{
}

Assessment::Assessment(
        const Assessment& x)
{
    m_id = x.m_id;
    m_event_id = x.m_event_id;
    m_value = x.m_value;
    m_comment = x.m_comment;
}

Assessment::Assessment(
        Assessment&& x) noexcept
{
    m_id = std::move(x.m_id);
    m_event_id = std::move(x.m_event_id);
    m_value = x.m_value;
    m_comment = std::move(x.m_comment);
}

Assessment& Assessment::operator =(
        const Assessment& x)
{

    m_id = x.m_id;
    m_event_id = x.m_event_id;
    m_value = x.m_value;
    m_comment = x.m_comment;
    return *this;
}

Assessment& Assessment::operator =(
        Assessment&& x) noexcept
{

    m_id = std::move(x.m_id);
    m_event_id = std::move(x.m_event_id);
    m_value = x.m_value;
    m_comment = std::move(x.m_comment);
    return *this;
}

bool Assessment::operator ==(
        const Assessment& x) const
{
    return (m_id == x.m_id &&
           m_event_id == x.m_event_id &&
           m_value == x.m_value &&
           m_comment == x.m_comment);
}

bool Assessment::operator !=(
        const Assessment& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void Assessment::id(
        const AMM::UUID& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void Assessment::id(
        AMM::UUID&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const AMM::UUID& Assessment::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
AMM::UUID& Assessment::id()
{
    return m_id;
}


/*!
 * @brief This function copies the value in member event_id
 * @param _event_id New value to be copied in member event_id
 */
void Assessment::event_id(
        const AMM::UUID& _event_id)
{
    m_event_id = _event_id;
}

/*!
 * @brief This function moves the value in member event_id
 * @param _event_id New value to be moved in member event_id
 */
void Assessment::event_id(
        AMM::UUID&& _event_id)
{
    m_event_id = std::move(_event_id);
}

/*!
 * @brief This function returns a constant reference to member event_id
 * @return Constant reference to member event_id
 */
const AMM::UUID& Assessment::event_id() const
{
    return m_event_id;
}

/*!
 * @brief This function returns a reference to member event_id
 * @return Reference to member event_id
 */
AMM::UUID& Assessment::event_id()
{
    return m_event_id;
}


/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void Assessment::value(
        AMM::AssessmentValue _value)
{
    m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
AMM::AssessmentValue Assessment::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
AMM::AssessmentValue& Assessment::value()
{
    return m_value;
}


/*!
 * @brief This function copies the value in member comment
 * @param _comment New value to be copied in member comment
 */
void Assessment::comment(
        const std::string& _comment)
{
    m_comment = _comment;
}

/*!
 * @brief This function moves the value in member comment
 * @param _comment New value to be moved in member comment
 */
void Assessment::comment(
        std::string&& _comment)
{
    m_comment = std::move(_comment);
}

/*!
 * @brief This function returns a constant reference to member comment
 * @return Constant reference to member comment
 */
const std::string& Assessment::comment() const
{
    return m_comment;
}

/*!
 * @brief This function returns a reference to member comment
 * @return Reference to member comment
 */
std::string& Assessment::comment()
{
    return m_comment;
}





EventFragment::EventFragment()
{
}

EventFragment::~EventFragment()
{
}

EventFragment::EventFragment(
        const EventFragment& x)
{
    m_id = x.m_id;
    m_timestamp = x.m_timestamp;
    m_educational_encounter = x.m_educational_encounter;
    m_location = x.m_location;
    m_agent_type = x.m_agent_type;
    m_agent_id = x.m_agent_id;
    m_type = x.m_type;
    m_data = x.m_data;
}

EventFragment::EventFragment(
        EventFragment&& x) noexcept
{
    m_id = std::move(x.m_id);
    m_timestamp = x.m_timestamp;
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_location = std::move(x.m_location);
    m_agent_type = x.m_agent_type;
    m_agent_id = std::move(x.m_agent_id);
    m_type = std::move(x.m_type);
    m_data = std::move(x.m_data);
}

EventFragment& EventFragment::operator =(
        const EventFragment& x)
{

    m_id = x.m_id;
    m_timestamp = x.m_timestamp;
    m_educational_encounter = x.m_educational_encounter;
    m_location = x.m_location;
    m_agent_type = x.m_agent_type;
    m_agent_id = x.m_agent_id;
    m_type = x.m_type;
    m_data = x.m_data;
    return *this;
}

EventFragment& EventFragment::operator =(
        EventFragment&& x) noexcept
{

    m_id = std::move(x.m_id);
    m_timestamp = x.m_timestamp;
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_location = std::move(x.m_location);
    m_agent_type = x.m_agent_type;
    m_agent_id = std::move(x.m_agent_id);
    m_type = std::move(x.m_type);
    m_data = std::move(x.m_data);
    return *this;
}

bool EventFragment::operator ==(
        const EventFragment& x) const
{
    return (m_id == x.m_id &&
           m_timestamp == x.m_timestamp &&
           m_educational_encounter == x.m_educational_encounter &&
           m_location == x.m_location &&
           m_agent_type == x.m_agent_type &&
           m_agent_id == x.m_agent_id &&
           m_type == x.m_type &&
           m_data == x.m_data);
}

bool EventFragment::operator !=(
        const EventFragment& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void EventFragment::id(
        const AMM::UUID& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void EventFragment::id(
        AMM::UUID&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const AMM::UUID& EventFragment::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
AMM::UUID& EventFragment::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void EventFragment::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t EventFragment::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& EventFragment::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member educational_encounter
 * @param _educational_encounter New value to be copied in member educational_encounter
 */
void EventFragment::educational_encounter(
        const AMM::UUID& _educational_encounter)
{
    m_educational_encounter = _educational_encounter;
}

/*!
 * @brief This function moves the value in member educational_encounter
 * @param _educational_encounter New value to be moved in member educational_encounter
 */
void EventFragment::educational_encounter(
        AMM::UUID&& _educational_encounter)
{
    m_educational_encounter = std::move(_educational_encounter);
}

/*!
 * @brief This function returns a constant reference to member educational_encounter
 * @return Constant reference to member educational_encounter
 */
const AMM::UUID& EventFragment::educational_encounter() const
{
    return m_educational_encounter;
}

/*!
 * @brief This function returns a reference to member educational_encounter
 * @return Reference to member educational_encounter
 */
AMM::UUID& EventFragment::educational_encounter()
{
    return m_educational_encounter;
}


/*!
 * @brief This function copies the value in member location
 * @param _location New value to be copied in member location
 */
void EventFragment::location(
        const AMM::FMA_Location& _location)
{
    m_location = _location;
}

/*!
 * @brief This function moves the value in member location
 * @param _location New value to be moved in member location
 */
void EventFragment::location(
        AMM::FMA_Location&& _location)
{
    m_location = std::move(_location);
}

/*!
 * @brief This function returns a constant reference to member location
 * @return Constant reference to member location
 */
const AMM::FMA_Location& EventFragment::location() const
{
    return m_location;
}

/*!
 * @brief This function returns a reference to member location
 * @return Reference to member location
 */
AMM::FMA_Location& EventFragment::location()
{
    return m_location;
}


/*!
 * @brief This function sets a value in member agent_type
 * @param _agent_type New value for member agent_type
 */
void EventFragment::agent_type(
        AMM::EventAgentType _agent_type)
{
    m_agent_type = _agent_type;
}

/*!
 * @brief This function returns the value of member agent_type
 * @return Value of member agent_type
 */
AMM::EventAgentType EventFragment::agent_type() const
{
    return m_agent_type;
}

/*!
 * @brief This function returns a reference to member agent_type
 * @return Reference to member agent_type
 */
AMM::EventAgentType& EventFragment::agent_type()
{
    return m_agent_type;
}


/*!
 * @brief This function copies the value in member agent_id
 * @param _agent_id New value to be copied in member agent_id
 */
void EventFragment::agent_id(
        const AMM::UUID& _agent_id)
{
    m_agent_id = _agent_id;
}

/*!
 * @brief This function moves the value in member agent_id
 * @param _agent_id New value to be moved in member agent_id
 */
void EventFragment::agent_id(
        AMM::UUID&& _agent_id)
{
    m_agent_id = std::move(_agent_id);
}

/*!
 * @brief This function returns a constant reference to member agent_id
 * @return Constant reference to member agent_id
 */
const AMM::UUID& EventFragment::agent_id() const
{
    return m_agent_id;
}

/*!
 * @brief This function returns a reference to member agent_id
 * @return Reference to member agent_id
 */
AMM::UUID& EventFragment::agent_id()
{
    return m_agent_id;
}


/*!
 * @brief This function copies the value in member type
 * @param _type New value to be copied in member type
 */
void EventFragment::type(
        const std::string& _type)
{
    m_type = _type;
}

/*!
 * @brief This function moves the value in member type
 * @param _type New value to be moved in member type
 */
void EventFragment::type(
        std::string&& _type)
{
    m_type = std::move(_type);
}

/*!
 * @brief This function returns a constant reference to member type
 * @return Constant reference to member type
 */
const std::string& EventFragment::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
std::string& EventFragment::type()
{
    return m_type;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void EventFragment::data(
        const eprosima::fastcdr::fixed_string<4096>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void EventFragment::data(
        eprosima::fastcdr::fixed_string<4096>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const eprosima::fastcdr::fixed_string<4096>& EventFragment::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
eprosima::fastcdr::fixed_string<4096>& EventFragment::data()
{
    return m_data;
}




EventRecord::EventRecord()
{
}

EventRecord::~EventRecord()
{
}

EventRecord::EventRecord(
        const EventRecord& x)
{
    m_id = x.m_id;
    m_timestamp = x.m_timestamp;
    m_educational_encounter = x.m_educational_encounter;
    m_location = x.m_location;
    m_agent_type = x.m_agent_type;
    m_agent_id = x.m_agent_id;
    m_type = x.m_type;
    m_data = x.m_data;
}

EventRecord::EventRecord(
        EventRecord&& x) noexcept
{
    m_id = std::move(x.m_id);
    m_timestamp = x.m_timestamp;
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_location = std::move(x.m_location);
    m_agent_type = x.m_agent_type;
    m_agent_id = std::move(x.m_agent_id);
    m_type = std::move(x.m_type);
    m_data = std::move(x.m_data);
}

EventRecord& EventRecord::operator =(
        const EventRecord& x)
{

    m_id = x.m_id;
    m_timestamp = x.m_timestamp;
    m_educational_encounter = x.m_educational_encounter;
    m_location = x.m_location;
    m_agent_type = x.m_agent_type;
    m_agent_id = x.m_agent_id;
    m_type = x.m_type;
    m_data = x.m_data;
    return *this;
}

EventRecord& EventRecord::operator =(
        EventRecord&& x) noexcept
{

    m_id = std::move(x.m_id);
    m_timestamp = x.m_timestamp;
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_location = std::move(x.m_location);
    m_agent_type = x.m_agent_type;
    m_agent_id = std::move(x.m_agent_id);
    m_type = std::move(x.m_type);
    m_data = std::move(x.m_data);
    return *this;
}

bool EventRecord::operator ==(
        const EventRecord& x) const
{
    return (m_id == x.m_id &&
           m_timestamp == x.m_timestamp &&
           m_educational_encounter == x.m_educational_encounter &&
           m_location == x.m_location &&
           m_agent_type == x.m_agent_type &&
           m_agent_id == x.m_agent_id &&
           m_type == x.m_type &&
           m_data == x.m_data);
}

bool EventRecord::operator !=(
        const EventRecord& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void EventRecord::id(
        const AMM::UUID& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void EventRecord::id(
        AMM::UUID&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const AMM::UUID& EventRecord::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
AMM::UUID& EventRecord::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void EventRecord::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t EventRecord::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& EventRecord::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member educational_encounter
 * @param _educational_encounter New value to be copied in member educational_encounter
 */
void EventRecord::educational_encounter(
        const AMM::UUID& _educational_encounter)
{
    m_educational_encounter = _educational_encounter;
}

/*!
 * @brief This function moves the value in member educational_encounter
 * @param _educational_encounter New value to be moved in member educational_encounter
 */
void EventRecord::educational_encounter(
        AMM::UUID&& _educational_encounter)
{
    m_educational_encounter = std::move(_educational_encounter);
}

/*!
 * @brief This function returns a constant reference to member educational_encounter
 * @return Constant reference to member educational_encounter
 */
const AMM::UUID& EventRecord::educational_encounter() const
{
    return m_educational_encounter;
}

/*!
 * @brief This function returns a reference to member educational_encounter
 * @return Reference to member educational_encounter
 */
AMM::UUID& EventRecord::educational_encounter()
{
    return m_educational_encounter;
}


/*!
 * @brief This function copies the value in member location
 * @param _location New value to be copied in member location
 */
void EventRecord::location(
        const AMM::FMA_Location& _location)
{
    m_location = _location;
}

/*!
 * @brief This function moves the value in member location
 * @param _location New value to be moved in member location
 */
void EventRecord::location(
        AMM::FMA_Location&& _location)
{
    m_location = std::move(_location);
}

/*!
 * @brief This function returns a constant reference to member location
 * @return Constant reference to member location
 */
const AMM::FMA_Location& EventRecord::location() const
{
    return m_location;
}

/*!
 * @brief This function returns a reference to member location
 * @return Reference to member location
 */
AMM::FMA_Location& EventRecord::location()
{
    return m_location;
}


/*!
 * @brief This function sets a value in member agent_type
 * @param _agent_type New value for member agent_type
 */
void EventRecord::agent_type(
        AMM::EventAgentType _agent_type)
{
    m_agent_type = _agent_type;
}

/*!
 * @brief This function returns the value of member agent_type
 * @return Value of member agent_type
 */
AMM::EventAgentType EventRecord::agent_type() const
{
    return m_agent_type;
}

/*!
 * @brief This function returns a reference to member agent_type
 * @return Reference to member agent_type
 */
AMM::EventAgentType& EventRecord::agent_type()
{
    return m_agent_type;
}


/*!
 * @brief This function copies the value in member agent_id
 * @param _agent_id New value to be copied in member agent_id
 */
void EventRecord::agent_id(
        const AMM::UUID& _agent_id)
{
    m_agent_id = _agent_id;
}

/*!
 * @brief This function moves the value in member agent_id
 * @param _agent_id New value to be moved in member agent_id
 */
void EventRecord::agent_id(
        AMM::UUID&& _agent_id)
{
    m_agent_id = std::move(_agent_id);
}

/*!
 * @brief This function returns a constant reference to member agent_id
 * @return Constant reference to member agent_id
 */
const AMM::UUID& EventRecord::agent_id() const
{
    return m_agent_id;
}

/*!
 * @brief This function returns a reference to member agent_id
 * @return Reference to member agent_id
 */
AMM::UUID& EventRecord::agent_id()
{
    return m_agent_id;
}


/*!
 * @brief This function copies the value in member type
 * @param _type New value to be copied in member type
 */
void EventRecord::type(
        const std::string& _type)
{
    m_type = _type;
}

/*!
 * @brief This function moves the value in member type
 * @param _type New value to be moved in member type
 */
void EventRecord::type(
        std::string&& _type)
{
    m_type = std::move(_type);
}

/*!
 * @brief This function returns a constant reference to member type
 * @return Constant reference to member type
 */
const std::string& EventRecord::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
std::string& EventRecord::type()
{
    return m_type;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void EventRecord::data(
        const eprosima::fastcdr::fixed_string<4096>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void EventRecord::data(
        eprosima::fastcdr::fixed_string<4096>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const eprosima::fastcdr::fixed_string<4096>& EventRecord::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
eprosima::fastcdr::fixed_string<4096>& EventRecord::data()
{
    return m_data;
}





FragmentAmendmentRequest::FragmentAmendmentRequest()
{
}

FragmentAmendmentRequest::~FragmentAmendmentRequest()
{
}

FragmentAmendmentRequest::FragmentAmendmentRequest(
        const FragmentAmendmentRequest& x)
{
    m_id = x.m_id;
    m_fragment_id = x.m_fragment_id;
    m_status = x.m_status;
    m_location = x.m_location;
    m_agent_type = x.m_agent_type;
    m_agent_id = x.m_agent_id;
}

FragmentAmendmentRequest::FragmentAmendmentRequest(
        FragmentAmendmentRequest&& x) noexcept
{
    m_id = std::move(x.m_id);
    m_fragment_id = std::move(x.m_fragment_id);
    m_status = x.m_status;
    m_location = std::move(x.m_location);
    m_agent_type = x.m_agent_type;
    m_agent_id = std::move(x.m_agent_id);
}

FragmentAmendmentRequest& FragmentAmendmentRequest::operator =(
        const FragmentAmendmentRequest& x)
{

    m_id = x.m_id;
    m_fragment_id = x.m_fragment_id;
    m_status = x.m_status;
    m_location = x.m_location;
    m_agent_type = x.m_agent_type;
    m_agent_id = x.m_agent_id;
    return *this;
}

FragmentAmendmentRequest& FragmentAmendmentRequest::operator =(
        FragmentAmendmentRequest&& x) noexcept
{

    m_id = std::move(x.m_id);
    m_fragment_id = std::move(x.m_fragment_id);
    m_status = x.m_status;
    m_location = std::move(x.m_location);
    m_agent_type = x.m_agent_type;
    m_agent_id = std::move(x.m_agent_id);
    return *this;
}

bool FragmentAmendmentRequest::operator ==(
        const FragmentAmendmentRequest& x) const
{
    return (m_id == x.m_id &&
           m_fragment_id == x.m_fragment_id &&
           m_status == x.m_status &&
           m_location == x.m_location &&
           m_agent_type == x.m_agent_type &&
           m_agent_id == x.m_agent_id);
}

bool FragmentAmendmentRequest::operator !=(
        const FragmentAmendmentRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void FragmentAmendmentRequest::id(
        const AMM::UUID& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void FragmentAmendmentRequest::id(
        AMM::UUID&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const AMM::UUID& FragmentAmendmentRequest::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
AMM::UUID& FragmentAmendmentRequest::id()
{
    return m_id;
}


/*!
 * @brief This function copies the value in member fragment_id
 * @param _fragment_id New value to be copied in member fragment_id
 */
void FragmentAmendmentRequest::fragment_id(
        const AMM::UUID& _fragment_id)
{
    m_fragment_id = _fragment_id;
}

/*!
 * @brief This function moves the value in member fragment_id
 * @param _fragment_id New value to be moved in member fragment_id
 */
void FragmentAmendmentRequest::fragment_id(
        AMM::UUID&& _fragment_id)
{
    m_fragment_id = std::move(_fragment_id);
}

/*!
 * @brief This function returns a constant reference to member fragment_id
 * @return Constant reference to member fragment_id
 */
const AMM::UUID& FragmentAmendmentRequest::fragment_id() const
{
    return m_fragment_id;
}

/*!
 * @brief This function returns a reference to member fragment_id
 * @return Reference to member fragment_id
 */
AMM::UUID& FragmentAmendmentRequest::fragment_id()
{
    return m_fragment_id;
}


/*!
 * @brief This function sets a value in member status
 * @param _status New value for member status
 */
void FragmentAmendmentRequest::status(
        AMM::FAR_Status _status)
{
    m_status = _status;
}

/*!
 * @brief This function returns the value of member status
 * @return Value of member status
 */
AMM::FAR_Status FragmentAmendmentRequest::status() const
{
    return m_status;
}

/*!
 * @brief This function returns a reference to member status
 * @return Reference to member status
 */
AMM::FAR_Status& FragmentAmendmentRequest::status()
{
    return m_status;
}


/*!
 * @brief This function copies the value in member location
 * @param _location New value to be copied in member location
 */
void FragmentAmendmentRequest::location(
        const AMM::FMA_Location& _location)
{
    m_location = _location;
}

/*!
 * @brief This function moves the value in member location
 * @param _location New value to be moved in member location
 */
void FragmentAmendmentRequest::location(
        AMM::FMA_Location&& _location)
{
    m_location = std::move(_location);
}

/*!
 * @brief This function returns a constant reference to member location
 * @return Constant reference to member location
 */
const AMM::FMA_Location& FragmentAmendmentRequest::location() const
{
    return m_location;
}

/*!
 * @brief This function returns a reference to member location
 * @return Reference to member location
 */
AMM::FMA_Location& FragmentAmendmentRequest::location()
{
    return m_location;
}


/*!
 * @brief This function sets a value in member agent_type
 * @param _agent_type New value for member agent_type
 */
void FragmentAmendmentRequest::agent_type(
        AMM::EventAgentType _agent_type)
{
    m_agent_type = _agent_type;
}

/*!
 * @brief This function returns the value of member agent_type
 * @return Value of member agent_type
 */
AMM::EventAgentType FragmentAmendmentRequest::agent_type() const
{
    return m_agent_type;
}

/*!
 * @brief This function returns a reference to member agent_type
 * @return Reference to member agent_type
 */
AMM::EventAgentType& FragmentAmendmentRequest::agent_type()
{
    return m_agent_type;
}


/*!
 * @brief This function copies the value in member agent_id
 * @param _agent_id New value to be copied in member agent_id
 */
void FragmentAmendmentRequest::agent_id(
        const AMM::UUID& _agent_id)
{
    m_agent_id = _agent_id;
}

/*!
 * @brief This function moves the value in member agent_id
 * @param _agent_id New value to be moved in member agent_id
 */
void FragmentAmendmentRequest::agent_id(
        AMM::UUID&& _agent_id)
{
    m_agent_id = std::move(_agent_id);
}

/*!
 * @brief This function returns a constant reference to member agent_id
 * @return Constant reference to member agent_id
 */
const AMM::UUID& FragmentAmendmentRequest::agent_id() const
{
    return m_agent_id;
}

/*!
 * @brief This function returns a reference to member agent_id
 * @return Reference to member agent_id
 */
AMM::UUID& FragmentAmendmentRequest::agent_id()
{
    return m_agent_id;
}





Log::Log()
{
}

Log::~Log()
{
}

Log::Log(
        const Log& x)
{
    m_timestamp = x.m_timestamp;
    m_module_id = x.m_module_id;
    m_level = x.m_level;
    m_message = x.m_message;
}

Log::Log(
        Log&& x) noexcept
{
    m_timestamp = x.m_timestamp;
    m_module_id = std::move(x.m_module_id);
    m_level = x.m_level;
    m_message = std::move(x.m_message);
}

Log& Log::operator =(
        const Log& x)
{

    m_timestamp = x.m_timestamp;
    m_module_id = x.m_module_id;
    m_level = x.m_level;
    m_message = x.m_message;
    return *this;
}

Log& Log::operator =(
        Log&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_module_id = std::move(x.m_module_id);
    m_level = x.m_level;
    m_message = std::move(x.m_message);
    return *this;
}

bool Log::operator ==(
        const Log& x) const
{
    return (m_timestamp == x.m_timestamp &&
           m_module_id == x.m_module_id &&
           m_level == x.m_level &&
           m_message == x.m_message);
}

bool Log::operator !=(
        const Log& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void Log::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t Log::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& Log::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member module_id
 * @param _module_id New value to be copied in member module_id
 */
void Log::module_id(
        const AMM::UUID& _module_id)
{
    m_module_id = _module_id;
}

/*!
 * @brief This function moves the value in member module_id
 * @param _module_id New value to be moved in member module_id
 */
void Log::module_id(
        AMM::UUID&& _module_id)
{
    m_module_id = std::move(_module_id);
}

/*!
 * @brief This function returns a constant reference to member module_id
 * @return Constant reference to member module_id
 */
const AMM::UUID& Log::module_id() const
{
    return m_module_id;
}

/*!
 * @brief This function returns a reference to member module_id
 * @return Reference to member module_id
 */
AMM::UUID& Log::module_id()
{
    return m_module_id;
}


/*!
 * @brief This function sets a value in member level
 * @param _level New value for member level
 */
void Log::level(
        AMM::LogLevel _level)
{
    m_level = _level;
}

/*!
 * @brief This function returns the value of member level
 * @return Value of member level
 */
AMM::LogLevel Log::level() const
{
    return m_level;
}

/*!
 * @brief This function returns a reference to member level
 * @return Reference to member level
 */
AMM::LogLevel& Log::level()
{
    return m_level;
}


/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void Log::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void Log::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& Log::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& Log::message()
{
    return m_message;
}




ModuleConfiguration::ModuleConfiguration()
{
}

ModuleConfiguration::~ModuleConfiguration()
{
}

ModuleConfiguration::ModuleConfiguration(
        const ModuleConfiguration& x)
{
    m_name = x.m_name;
    m_module_id = x.m_module_id;
    m_educational_encounter = x.m_educational_encounter;
    m_timestamp = x.m_timestamp;
    m_capabilities_configuration = x.m_capabilities_configuration;
}

ModuleConfiguration::ModuleConfiguration(
        ModuleConfiguration&& x) noexcept
{
    m_name = std::move(x.m_name);
    m_module_id = std::move(x.m_module_id);
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_timestamp = x.m_timestamp;
    m_capabilities_configuration = std::move(x.m_capabilities_configuration);
}

ModuleConfiguration& ModuleConfiguration::operator =(
        const ModuleConfiguration& x)
{

    m_name = x.m_name;
    m_module_id = x.m_module_id;
    m_educational_encounter = x.m_educational_encounter;
    m_timestamp = x.m_timestamp;
    m_capabilities_configuration = x.m_capabilities_configuration;
    return *this;
}

ModuleConfiguration& ModuleConfiguration::operator =(
        ModuleConfiguration&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_module_id = std::move(x.m_module_id);
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_timestamp = x.m_timestamp;
    m_capabilities_configuration = std::move(x.m_capabilities_configuration);
    return *this;
}

bool ModuleConfiguration::operator ==(
        const ModuleConfiguration& x) const
{
    return (m_name == x.m_name &&
           m_module_id == x.m_module_id &&
           m_educational_encounter == x.m_educational_encounter &&
           m_timestamp == x.m_timestamp &&
           m_capabilities_configuration == x.m_capabilities_configuration);
}

bool ModuleConfiguration::operator !=(
        const ModuleConfiguration& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void ModuleConfiguration::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void ModuleConfiguration::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& ModuleConfiguration::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& ModuleConfiguration::name()
{
    return m_name;
}


/*!
 * @brief This function copies the value in member module_id
 * @param _module_id New value to be copied in member module_id
 */
void ModuleConfiguration::module_id(
        const AMM::UUID& _module_id)
{
    m_module_id = _module_id;
}

/*!
 * @brief This function moves the value in member module_id
 * @param _module_id New value to be moved in member module_id
 */
void ModuleConfiguration::module_id(
        AMM::UUID&& _module_id)
{
    m_module_id = std::move(_module_id);
}

/*!
 * @brief This function returns a constant reference to member module_id
 * @return Constant reference to member module_id
 */
const AMM::UUID& ModuleConfiguration::module_id() const
{
    return m_module_id;
}

/*!
 * @brief This function returns a reference to member module_id
 * @return Reference to member module_id
 */
AMM::UUID& ModuleConfiguration::module_id()
{
    return m_module_id;
}


/*!
 * @brief This function copies the value in member educational_encounter
 * @param _educational_encounter New value to be copied in member educational_encounter
 */
void ModuleConfiguration::educational_encounter(
        const AMM::UUID& _educational_encounter)
{
    m_educational_encounter = _educational_encounter;
}

/*!
 * @brief This function moves the value in member educational_encounter
 * @param _educational_encounter New value to be moved in member educational_encounter
 */
void ModuleConfiguration::educational_encounter(
        AMM::UUID&& _educational_encounter)
{
    m_educational_encounter = std::move(_educational_encounter);
}

/*!
 * @brief This function returns a constant reference to member educational_encounter
 * @return Constant reference to member educational_encounter
 */
const AMM::UUID& ModuleConfiguration::educational_encounter() const
{
    return m_educational_encounter;
}

/*!
 * @brief This function returns a reference to member educational_encounter
 * @return Reference to member educational_encounter
 */
AMM::UUID& ModuleConfiguration::educational_encounter()
{
    return m_educational_encounter;
}


/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void ModuleConfiguration::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t ModuleConfiguration::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& ModuleConfiguration::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member capabilities_configuration
 * @param _capabilities_configuration New value to be copied in member capabilities_configuration
 */
void ModuleConfiguration::capabilities_configuration(
        const eprosima::fastcdr::fixed_string<12000>& _capabilities_configuration)
{
    m_capabilities_configuration = _capabilities_configuration;
}

/*!
 * @brief This function moves the value in member capabilities_configuration
 * @param _capabilities_configuration New value to be moved in member capabilities_configuration
 */
void ModuleConfiguration::capabilities_configuration(
        eprosima::fastcdr::fixed_string<12000>&& _capabilities_configuration)
{
    m_capabilities_configuration = std::move(_capabilities_configuration);
}

/*!
 * @brief This function returns a constant reference to member capabilities_configuration
 * @return Constant reference to member capabilities_configuration
 */
const eprosima::fastcdr::fixed_string<12000>& ModuleConfiguration::capabilities_configuration() const
{
    return m_capabilities_configuration;
}

/*!
 * @brief This function returns a reference to member capabilities_configuration
 * @return Reference to member capabilities_configuration
 */
eprosima::fastcdr::fixed_string<12000>& ModuleConfiguration::capabilities_configuration()
{
    return m_capabilities_configuration;
}




OmittedEvent::OmittedEvent()
{
}

OmittedEvent::~OmittedEvent()
{
}

OmittedEvent::OmittedEvent(
        const OmittedEvent& x)
{
    m_id = x.m_id;
    m_timestamp = x.m_timestamp;
    m_educational_encounter = x.m_educational_encounter;
    m_location = x.m_location;
    m_agent_type = x.m_agent_type;
    m_agent_id = x.m_agent_id;
    m_type = x.m_type;
    m_data = x.m_data;
}

OmittedEvent::OmittedEvent(
        OmittedEvent&& x) noexcept
{
    m_id = std::move(x.m_id);
    m_timestamp = x.m_timestamp;
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_location = std::move(x.m_location);
    m_agent_type = x.m_agent_type;
    m_agent_id = std::move(x.m_agent_id);
    m_type = std::move(x.m_type);
    m_data = std::move(x.m_data);
}

OmittedEvent& OmittedEvent::operator =(
        const OmittedEvent& x)
{

    m_id = x.m_id;
    m_timestamp = x.m_timestamp;
    m_educational_encounter = x.m_educational_encounter;
    m_location = x.m_location;
    m_agent_type = x.m_agent_type;
    m_agent_id = x.m_agent_id;
    m_type = x.m_type;
    m_data = x.m_data;
    return *this;
}

OmittedEvent& OmittedEvent::operator =(
        OmittedEvent&& x) noexcept
{

    m_id = std::move(x.m_id);
    m_timestamp = x.m_timestamp;
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_location = std::move(x.m_location);
    m_agent_type = x.m_agent_type;
    m_agent_id = std::move(x.m_agent_id);
    m_type = std::move(x.m_type);
    m_data = std::move(x.m_data);
    return *this;
}

bool OmittedEvent::operator ==(
        const OmittedEvent& x) const
{
    return (m_id == x.m_id &&
           m_timestamp == x.m_timestamp &&
           m_educational_encounter == x.m_educational_encounter &&
           m_location == x.m_location &&
           m_agent_type == x.m_agent_type &&
           m_agent_id == x.m_agent_id &&
           m_type == x.m_type &&
           m_data == x.m_data);
}

bool OmittedEvent::operator !=(
        const OmittedEvent& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void OmittedEvent::id(
        const AMM::UUID& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void OmittedEvent::id(
        AMM::UUID&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const AMM::UUID& OmittedEvent::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
AMM::UUID& OmittedEvent::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void OmittedEvent::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t OmittedEvent::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& OmittedEvent::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member educational_encounter
 * @param _educational_encounter New value to be copied in member educational_encounter
 */
void OmittedEvent::educational_encounter(
        const AMM::UUID& _educational_encounter)
{
    m_educational_encounter = _educational_encounter;
}

/*!
 * @brief This function moves the value in member educational_encounter
 * @param _educational_encounter New value to be moved in member educational_encounter
 */
void OmittedEvent::educational_encounter(
        AMM::UUID&& _educational_encounter)
{
    m_educational_encounter = std::move(_educational_encounter);
}

/*!
 * @brief This function returns a constant reference to member educational_encounter
 * @return Constant reference to member educational_encounter
 */
const AMM::UUID& OmittedEvent::educational_encounter() const
{
    return m_educational_encounter;
}

/*!
 * @brief This function returns a reference to member educational_encounter
 * @return Reference to member educational_encounter
 */
AMM::UUID& OmittedEvent::educational_encounter()
{
    return m_educational_encounter;
}


/*!
 * @brief This function copies the value in member location
 * @param _location New value to be copied in member location
 */
void OmittedEvent::location(
        const AMM::FMA_Location& _location)
{
    m_location = _location;
}

/*!
 * @brief This function moves the value in member location
 * @param _location New value to be moved in member location
 */
void OmittedEvent::location(
        AMM::FMA_Location&& _location)
{
    m_location = std::move(_location);
}

/*!
 * @brief This function returns a constant reference to member location
 * @return Constant reference to member location
 */
const AMM::FMA_Location& OmittedEvent::location() const
{
    return m_location;
}

/*!
 * @brief This function returns a reference to member location
 * @return Reference to member location
 */
AMM::FMA_Location& OmittedEvent::location()
{
    return m_location;
}


/*!
 * @brief This function sets a value in member agent_type
 * @param _agent_type New value for member agent_type
 */
void OmittedEvent::agent_type(
        AMM::EventAgentType _agent_type)
{
    m_agent_type = _agent_type;
}

/*!
 * @brief This function returns the value of member agent_type
 * @return Value of member agent_type
 */
AMM::EventAgentType OmittedEvent::agent_type() const
{
    return m_agent_type;
}

/*!
 * @brief This function returns a reference to member agent_type
 * @return Reference to member agent_type
 */
AMM::EventAgentType& OmittedEvent::agent_type()
{
    return m_agent_type;
}


/*!
 * @brief This function copies the value in member agent_id
 * @param _agent_id New value to be copied in member agent_id
 */
void OmittedEvent::agent_id(
        const AMM::UUID& _agent_id)
{
    m_agent_id = _agent_id;
}

/*!
 * @brief This function moves the value in member agent_id
 * @param _agent_id New value to be moved in member agent_id
 */
void OmittedEvent::agent_id(
        AMM::UUID&& _agent_id)
{
    m_agent_id = std::move(_agent_id);
}

/*!
 * @brief This function returns a constant reference to member agent_id
 * @return Constant reference to member agent_id
 */
const AMM::UUID& OmittedEvent::agent_id() const
{
    return m_agent_id;
}

/*!
 * @brief This function returns a reference to member agent_id
 * @return Reference to member agent_id
 */
AMM::UUID& OmittedEvent::agent_id()
{
    return m_agent_id;
}


/*!
 * @brief This function copies the value in member type
 * @param _type New value to be copied in member type
 */
void OmittedEvent::type(
        const std::string& _type)
{
    m_type = _type;
}

/*!
 * @brief This function moves the value in member type
 * @param _type New value to be moved in member type
 */
void OmittedEvent::type(
        std::string&& _type)
{
    m_type = std::move(_type);
}

/*!
 * @brief This function returns a constant reference to member type
 * @return Constant reference to member type
 */
const std::string& OmittedEvent::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
std::string& OmittedEvent::type()
{
    return m_type;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void OmittedEvent::data(
        const eprosima::fastcdr::fixed_string<4096>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void OmittedEvent::data(
        eprosima::fastcdr::fixed_string<4096>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const eprosima::fastcdr::fixed_string<4096>& OmittedEvent::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
eprosima::fastcdr::fixed_string<4096>& OmittedEvent::data()
{
    return m_data;
}




Semantic_Version::Semantic_Version()
{
}

Semantic_Version::~Semantic_Version()
{
}

Semantic_Version::Semantic_Version(
        const Semantic_Version& x)
{
    m_major = x.m_major;
    m_minor = x.m_minor;
    m_patch = x.m_patch;
}

Semantic_Version::Semantic_Version(
        Semantic_Version&& x) noexcept
{
    m_major = x.m_major;
    m_minor = x.m_minor;
    m_patch = x.m_patch;
}

Semantic_Version& Semantic_Version::operator =(
        const Semantic_Version& x)
{

    m_major = x.m_major;
    m_minor = x.m_minor;
    m_patch = x.m_patch;
    return *this;
}

Semantic_Version& Semantic_Version::operator =(
        Semantic_Version&& x) noexcept
{

    m_major = x.m_major;
    m_minor = x.m_minor;
    m_patch = x.m_patch;
    return *this;
}

bool Semantic_Version::operator ==(
        const Semantic_Version& x) const
{
    return (m_major == x.m_major &&
           m_minor == x.m_minor &&
           m_patch == x.m_patch);
}

bool Semantic_Version::operator !=(
        const Semantic_Version& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member major
 * @param _major New value for member major
 */
void Semantic_Version::major(
        uint16_t _major)
{
    m_major = _major;
}

/*!
 * @brief This function returns the value of member major
 * @return Value of member major
 */
uint16_t Semantic_Version::major() const
{
    return m_major;
}

/*!
 * @brief This function returns a reference to member major
 * @return Reference to member major
 */
uint16_t& Semantic_Version::major()
{
    return m_major;
}


/*!
 * @brief This function sets a value in member minor
 * @param _minor New value for member minor
 */
void Semantic_Version::minor(
        uint16_t _minor)
{
    m_minor = _minor;
}

/*!
 * @brief This function returns the value of member minor
 * @return Value of member minor
 */
uint16_t Semantic_Version::minor() const
{
    return m_minor;
}

/*!
 * @brief This function returns a reference to member minor
 * @return Reference to member minor
 */
uint16_t& Semantic_Version::minor()
{
    return m_minor;
}


/*!
 * @brief This function sets a value in member patch
 * @param _patch New value for member patch
 */
void Semantic_Version::patch(
        uint16_t _patch)
{
    m_patch = _patch;
}

/*!
 * @brief This function returns the value of member patch
 * @return Value of member patch
 */
uint16_t Semantic_Version::patch() const
{
    return m_patch;
}

/*!
 * @brief This function returns a reference to member patch
 * @return Reference to member patch
 */
uint16_t& Semantic_Version::patch()
{
    return m_patch;
}




OperationalDescription::OperationalDescription()
{
}

OperationalDescription::~OperationalDescription()
{
}

OperationalDescription::OperationalDescription(
        const OperationalDescription& x)
{
    m_name = x.m_name;
    m_description = x.m_description;
    m_manufacturer = x.m_manufacturer;
    m_model = x.m_model;
    m_serial_number = x.m_serial_number;
    m_module_id = x.m_module_id;
    m_module_version = x.m_module_version;
    m_configuration_version = x.m_configuration_version;
    m_AMM_version = x.m_AMM_version;
    m_ip_address = x.m_ip_address;
    m_capabilities_schema = x.m_capabilities_schema;
}

OperationalDescription::OperationalDescription(
        OperationalDescription&& x) noexcept
{
    m_name = std::move(x.m_name);
    m_description = std::move(x.m_description);
    m_manufacturer = std::move(x.m_manufacturer);
    m_model = std::move(x.m_model);
    m_serial_number = std::move(x.m_serial_number);
    m_module_id = std::move(x.m_module_id);
    m_module_version = std::move(x.m_module_version);
    m_configuration_version = std::move(x.m_configuration_version);
    m_AMM_version = std::move(x.m_AMM_version);
    m_ip_address = std::move(x.m_ip_address);
    m_capabilities_schema = std::move(x.m_capabilities_schema);
}

OperationalDescription& OperationalDescription::operator =(
        const OperationalDescription& x)
{

    m_name = x.m_name;
    m_description = x.m_description;
    m_manufacturer = x.m_manufacturer;
    m_model = x.m_model;
    m_serial_number = x.m_serial_number;
    m_module_id = x.m_module_id;
    m_module_version = x.m_module_version;
    m_configuration_version = x.m_configuration_version;
    m_AMM_version = x.m_AMM_version;
    m_ip_address = x.m_ip_address;
    m_capabilities_schema = x.m_capabilities_schema;
    return *this;
}

OperationalDescription& OperationalDescription::operator =(
        OperationalDescription&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_description = std::move(x.m_description);
    m_manufacturer = std::move(x.m_manufacturer);
    m_model = std::move(x.m_model);
    m_serial_number = std::move(x.m_serial_number);
    m_module_id = std::move(x.m_module_id);
    m_module_version = std::move(x.m_module_version);
    m_configuration_version = std::move(x.m_configuration_version);
    m_AMM_version = std::move(x.m_AMM_version);
    m_ip_address = std::move(x.m_ip_address);
    m_capabilities_schema = std::move(x.m_capabilities_schema);
    return *this;
}

bool OperationalDescription::operator ==(
        const OperationalDescription& x) const
{
    return (m_name == x.m_name &&
           m_description == x.m_description &&
           m_manufacturer == x.m_manufacturer &&
           m_model == x.m_model &&
           m_serial_number == x.m_serial_number &&
           m_module_id == x.m_module_id &&
           m_module_version == x.m_module_version &&
           m_configuration_version == x.m_configuration_version &&
           m_AMM_version == x.m_AMM_version &&
           m_ip_address == x.m_ip_address &&
           m_capabilities_schema == x.m_capabilities_schema);
}

bool OperationalDescription::operator !=(
        const OperationalDescription& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void OperationalDescription::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void OperationalDescription::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& OperationalDescription::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& OperationalDescription::name()
{
    return m_name;
}


/*!
 * @brief This function copies the value in member description
 * @param _description New value to be copied in member description
 */
void OperationalDescription::description(
        const std::string& _description)
{
    m_description = _description;
}

/*!
 * @brief This function moves the value in member description
 * @param _description New value to be moved in member description
 */
void OperationalDescription::description(
        std::string&& _description)
{
    m_description = std::move(_description);
}

/*!
 * @brief This function returns a constant reference to member description
 * @return Constant reference to member description
 */
const std::string& OperationalDescription::description() const
{
    return m_description;
}

/*!
 * @brief This function returns a reference to member description
 * @return Reference to member description
 */
std::string& OperationalDescription::description()
{
    return m_description;
}


/*!
 * @brief This function copies the value in member manufacturer
 * @param _manufacturer New value to be copied in member manufacturer
 */
void OperationalDescription::manufacturer(
        const std::string& _manufacturer)
{
    m_manufacturer = _manufacturer;
}

/*!
 * @brief This function moves the value in member manufacturer
 * @param _manufacturer New value to be moved in member manufacturer
 */
void OperationalDescription::manufacturer(
        std::string&& _manufacturer)
{
    m_manufacturer = std::move(_manufacturer);
}

/*!
 * @brief This function returns a constant reference to member manufacturer
 * @return Constant reference to member manufacturer
 */
const std::string& OperationalDescription::manufacturer() const
{
    return m_manufacturer;
}

/*!
 * @brief This function returns a reference to member manufacturer
 * @return Reference to member manufacturer
 */
std::string& OperationalDescription::manufacturer()
{
    return m_manufacturer;
}


/*!
 * @brief This function copies the value in member model
 * @param _model New value to be copied in member model
 */
void OperationalDescription::model(
        const std::string& _model)
{
    m_model = _model;
}

/*!
 * @brief This function moves the value in member model
 * @param _model New value to be moved in member model
 */
void OperationalDescription::model(
        std::string&& _model)
{
    m_model = std::move(_model);
}

/*!
 * @brief This function returns a constant reference to member model
 * @return Constant reference to member model
 */
const std::string& OperationalDescription::model() const
{
    return m_model;
}

/*!
 * @brief This function returns a reference to member model
 * @return Reference to member model
 */
std::string& OperationalDescription::model()
{
    return m_model;
}


/*!
 * @brief This function copies the value in member serial_number
 * @param _serial_number New value to be copied in member serial_number
 */
void OperationalDescription::serial_number(
        const std::string& _serial_number)
{
    m_serial_number = _serial_number;
}

/*!
 * @brief This function moves the value in member serial_number
 * @param _serial_number New value to be moved in member serial_number
 */
void OperationalDescription::serial_number(
        std::string&& _serial_number)
{
    m_serial_number = std::move(_serial_number);
}

/*!
 * @brief This function returns a constant reference to member serial_number
 * @return Constant reference to member serial_number
 */
const std::string& OperationalDescription::serial_number() const
{
    return m_serial_number;
}

/*!
 * @brief This function returns a reference to member serial_number
 * @return Reference to member serial_number
 */
std::string& OperationalDescription::serial_number()
{
    return m_serial_number;
}


/*!
 * @brief This function copies the value in member module_id
 * @param _module_id New value to be copied in member module_id
 */
void OperationalDescription::module_id(
        const AMM::UUID& _module_id)
{
    m_module_id = _module_id;
}

/*!
 * @brief This function moves the value in member module_id
 * @param _module_id New value to be moved in member module_id
 */
void OperationalDescription::module_id(
        AMM::UUID&& _module_id)
{
    m_module_id = std::move(_module_id);
}

/*!
 * @brief This function returns a constant reference to member module_id
 * @return Constant reference to member module_id
 */
const AMM::UUID& OperationalDescription::module_id() const
{
    return m_module_id;
}

/*!
 * @brief This function returns a reference to member module_id
 * @return Reference to member module_id
 */
AMM::UUID& OperationalDescription::module_id()
{
    return m_module_id;
}


/*!
 * @brief This function copies the value in member module_version
 * @param _module_version New value to be copied in member module_version
 */
void OperationalDescription::module_version(
        const std::string& _module_version)
{
    m_module_version = _module_version;
}

/*!
 * @brief This function moves the value in member module_version
 * @param _module_version New value to be moved in member module_version
 */
void OperationalDescription::module_version(
        std::string&& _module_version)
{
    m_module_version = std::move(_module_version);
}

/*!
 * @brief This function returns a constant reference to member module_version
 * @return Constant reference to member module_version
 */
const std::string& OperationalDescription::module_version() const
{
    return m_module_version;
}

/*!
 * @brief This function returns a reference to member module_version
 * @return Reference to member module_version
 */
std::string& OperationalDescription::module_version()
{
    return m_module_version;
}


/*!
 * @brief This function copies the value in member configuration_version
 * @param _configuration_version New value to be copied in member configuration_version
 */
void OperationalDescription::configuration_version(
        const std::string& _configuration_version)
{
    m_configuration_version = _configuration_version;
}

/*!
 * @brief This function moves the value in member configuration_version
 * @param _configuration_version New value to be moved in member configuration_version
 */
void OperationalDescription::configuration_version(
        std::string&& _configuration_version)
{
    m_configuration_version = std::move(_configuration_version);
}

/*!
 * @brief This function returns a constant reference to member configuration_version
 * @return Constant reference to member configuration_version
 */
const std::string& OperationalDescription::configuration_version() const
{
    return m_configuration_version;
}

/*!
 * @brief This function returns a reference to member configuration_version
 * @return Reference to member configuration_version
 */
std::string& OperationalDescription::configuration_version()
{
    return m_configuration_version;
}


/*!
 * @brief This function copies the value in member AMM_version
 * @param _AMM_version New value to be copied in member AMM_version
 */
void OperationalDescription::AMM_version(
        const std::string& _AMM_version)
{
    m_AMM_version = _AMM_version;
}

/*!
 * @brief This function moves the value in member AMM_version
 * @param _AMM_version New value to be moved in member AMM_version
 */
void OperationalDescription::AMM_version(
        std::string&& _AMM_version)
{
    m_AMM_version = std::move(_AMM_version);
}

/*!
 * @brief This function returns a constant reference to member AMM_version
 * @return Constant reference to member AMM_version
 */
const std::string& OperationalDescription::AMM_version() const
{
    return m_AMM_version;
}

/*!
 * @brief This function returns a reference to member AMM_version
 * @return Reference to member AMM_version
 */
std::string& OperationalDescription::AMM_version()
{
    return m_AMM_version;
}


/*!
 * @brief This function copies the value in member ip_address
 * @param _ip_address New value to be copied in member ip_address
 */
void OperationalDescription::ip_address(
        const std::array<uint8_t, 4>& _ip_address)
{
    m_ip_address = _ip_address;
}

/*!
 * @brief This function moves the value in member ip_address
 * @param _ip_address New value to be moved in member ip_address
 */
void OperationalDescription::ip_address(
        std::array<uint8_t, 4>&& _ip_address)
{
    m_ip_address = std::move(_ip_address);
}

/*!
 * @brief This function returns a constant reference to member ip_address
 * @return Constant reference to member ip_address
 */
const std::array<uint8_t, 4>& OperationalDescription::ip_address() const
{
    return m_ip_address;
}

/*!
 * @brief This function returns a reference to member ip_address
 * @return Reference to member ip_address
 */
std::array<uint8_t, 4>& OperationalDescription::ip_address()
{
    return m_ip_address;
}


/*!
 * @brief This function copies the value in member capabilities_schema
 * @param _capabilities_schema New value to be copied in member capabilities_schema
 */
void OperationalDescription::capabilities_schema(
        const eprosima::fastcdr::fixed_string<12000>& _capabilities_schema)
{
    m_capabilities_schema = _capabilities_schema;
}

/*!
 * @brief This function moves the value in member capabilities_schema
 * @param _capabilities_schema New value to be moved in member capabilities_schema
 */
void OperationalDescription::capabilities_schema(
        eprosima::fastcdr::fixed_string<12000>&& _capabilities_schema)
{
    m_capabilities_schema = std::move(_capabilities_schema);
}

/*!
 * @brief This function returns a constant reference to member capabilities_schema
 * @return Constant reference to member capabilities_schema
 */
const eprosima::fastcdr::fixed_string<12000>& OperationalDescription::capabilities_schema() const
{
    return m_capabilities_schema;
}

/*!
 * @brief This function returns a reference to member capabilities_schema
 * @return Reference to member capabilities_schema
 */
eprosima::fastcdr::fixed_string<12000>& OperationalDescription::capabilities_schema()
{
    return m_capabilities_schema;
}




PhysiologyModification::PhysiologyModification()
{
}

PhysiologyModification::~PhysiologyModification()
{
}

PhysiologyModification::PhysiologyModification(
        const PhysiologyModification& x)
{
    m_id = x.m_id;
    m_event_id = x.m_event_id;
    m_type = x.m_type;
    m_data = x.m_data;
}

PhysiologyModification::PhysiologyModification(
        PhysiologyModification&& x) noexcept
{
    m_id = std::move(x.m_id);
    m_event_id = std::move(x.m_event_id);
    m_type = std::move(x.m_type);
    m_data = std::move(x.m_data);
}

PhysiologyModification& PhysiologyModification::operator =(
        const PhysiologyModification& x)
{

    m_id = x.m_id;
    m_event_id = x.m_event_id;
    m_type = x.m_type;
    m_data = x.m_data;
    return *this;
}

PhysiologyModification& PhysiologyModification::operator =(
        PhysiologyModification&& x) noexcept
{

    m_id = std::move(x.m_id);
    m_event_id = std::move(x.m_event_id);
    m_type = std::move(x.m_type);
    m_data = std::move(x.m_data);
    return *this;
}

bool PhysiologyModification::operator ==(
        const PhysiologyModification& x) const
{
    return (m_id == x.m_id &&
           m_event_id == x.m_event_id &&
           m_type == x.m_type &&
           m_data == x.m_data);
}

bool PhysiologyModification::operator !=(
        const PhysiologyModification& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void PhysiologyModification::id(
        const AMM::UUID& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void PhysiologyModification::id(
        AMM::UUID&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const AMM::UUID& PhysiologyModification::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
AMM::UUID& PhysiologyModification::id()
{
    return m_id;
}


/*!
 * @brief This function copies the value in member event_id
 * @param _event_id New value to be copied in member event_id
 */
void PhysiologyModification::event_id(
        const AMM::UUID& _event_id)
{
    m_event_id = _event_id;
}

/*!
 * @brief This function moves the value in member event_id
 * @param _event_id New value to be moved in member event_id
 */
void PhysiologyModification::event_id(
        AMM::UUID&& _event_id)
{
    m_event_id = std::move(_event_id);
}

/*!
 * @brief This function returns a constant reference to member event_id
 * @return Constant reference to member event_id
 */
const AMM::UUID& PhysiologyModification::event_id() const
{
    return m_event_id;
}

/*!
 * @brief This function returns a reference to member event_id
 * @return Reference to member event_id
 */
AMM::UUID& PhysiologyModification::event_id()
{
    return m_event_id;
}


/*!
 * @brief This function copies the value in member type
 * @param _type New value to be copied in member type
 */
void PhysiologyModification::type(
        const std::string& _type)
{
    m_type = _type;
}

/*!
 * @brief This function moves the value in member type
 * @param _type New value to be moved in member type
 */
void PhysiologyModification::type(
        std::string&& _type)
{
    m_type = std::move(_type);
}

/*!
 * @brief This function returns a constant reference to member type
 * @return Constant reference to member type
 */
const std::string& PhysiologyModification::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
std::string& PhysiologyModification::type()
{
    return m_type;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void PhysiologyModification::data(
        const eprosima::fastcdr::fixed_string<4096>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void PhysiologyModification::data(
        eprosima::fastcdr::fixed_string<4096>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const eprosima::fastcdr::fixed_string<4096>& PhysiologyModification::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
eprosima::fastcdr::fixed_string<4096>& PhysiologyModification::data()
{
    return m_data;
}




PhysiologyValue::PhysiologyValue()
{
}

PhysiologyValue::~PhysiologyValue()
{
}

PhysiologyValue::PhysiologyValue(
        const PhysiologyValue& x)
{
    m_educational_encounter = x.m_educational_encounter;
    m_simulation_time = x.m_simulation_time;
    m_timestamp = x.m_timestamp;
    m_name = x.m_name;
    m_unit = x.m_unit;
    m_value = x.m_value;
}

PhysiologyValue::PhysiologyValue(
        PhysiologyValue&& x) noexcept
{
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_simulation_time = x.m_simulation_time;
    m_timestamp = x.m_timestamp;
    m_name = std::move(x.m_name);
    m_unit = std::move(x.m_unit);
    m_value = x.m_value;
}

PhysiologyValue& PhysiologyValue::operator =(
        const PhysiologyValue& x)
{

    m_educational_encounter = x.m_educational_encounter;
    m_simulation_time = x.m_simulation_time;
    m_timestamp = x.m_timestamp;
    m_name = x.m_name;
    m_unit = x.m_unit;
    m_value = x.m_value;
    return *this;
}

PhysiologyValue& PhysiologyValue::operator =(
        PhysiologyValue&& x) noexcept
{

    m_educational_encounter = std::move(x.m_educational_encounter);
    m_simulation_time = x.m_simulation_time;
    m_timestamp = x.m_timestamp;
    m_name = std::move(x.m_name);
    m_unit = std::move(x.m_unit);
    m_value = x.m_value;
    return *this;
}

bool PhysiologyValue::operator ==(
        const PhysiologyValue& x) const
{
    return (m_educational_encounter == x.m_educational_encounter &&
           m_simulation_time == x.m_simulation_time &&
           m_timestamp == x.m_timestamp &&
           m_name == x.m_name &&
           m_unit == x.m_unit &&
           m_value == x.m_value);
}

bool PhysiologyValue::operator !=(
        const PhysiologyValue& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member educational_encounter
 * @param _educational_encounter New value to be copied in member educational_encounter
 */
void PhysiologyValue::educational_encounter(
        const AMM::UUID& _educational_encounter)
{
    m_educational_encounter = _educational_encounter;
}

/*!
 * @brief This function moves the value in member educational_encounter
 * @param _educational_encounter New value to be moved in member educational_encounter
 */
void PhysiologyValue::educational_encounter(
        AMM::UUID&& _educational_encounter)
{
    m_educational_encounter = std::move(_educational_encounter);
}

/*!
 * @brief This function returns a constant reference to member educational_encounter
 * @return Constant reference to member educational_encounter
 */
const AMM::UUID& PhysiologyValue::educational_encounter() const
{
    return m_educational_encounter;
}

/*!
 * @brief This function returns a reference to member educational_encounter
 * @return Reference to member educational_encounter
 */
AMM::UUID& PhysiologyValue::educational_encounter()
{
    return m_educational_encounter;
}


/*!
 * @brief This function sets a value in member simulation_time
 * @param _simulation_time New value for member simulation_time
 */
void PhysiologyValue::simulation_time(
        int64_t _simulation_time)
{
    m_simulation_time = _simulation_time;
}

/*!
 * @brief This function returns the value of member simulation_time
 * @return Value of member simulation_time
 */
int64_t PhysiologyValue::simulation_time() const
{
    return m_simulation_time;
}

/*!
 * @brief This function returns a reference to member simulation_time
 * @return Reference to member simulation_time
 */
int64_t& PhysiologyValue::simulation_time()
{
    return m_simulation_time;
}


/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void PhysiologyValue::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t PhysiologyValue::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& PhysiologyValue::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void PhysiologyValue::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void PhysiologyValue::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& PhysiologyValue::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& PhysiologyValue::name()
{
    return m_name;
}


/*!
 * @brief This function copies the value in member unit
 * @param _unit New value to be copied in member unit
 */
void PhysiologyValue::unit(
        const std::string& _unit)
{
    m_unit = _unit;
}

/*!
 * @brief This function moves the value in member unit
 * @param _unit New value to be moved in member unit
 */
void PhysiologyValue::unit(
        std::string&& _unit)
{
    m_unit = std::move(_unit);
}

/*!
 * @brief This function returns a constant reference to member unit
 * @return Constant reference to member unit
 */
const std::string& PhysiologyValue::unit() const
{
    return m_unit;
}

/*!
 * @brief This function returns a reference to member unit
 * @return Reference to member unit
 */
std::string& PhysiologyValue::unit()
{
    return m_unit;
}


/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void PhysiologyValue::value(
        double _value)
{
    m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
double PhysiologyValue::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
double& PhysiologyValue::value()
{
    return m_value;
}




PhysiologyWaveform::PhysiologyWaveform()
{
}

PhysiologyWaveform::~PhysiologyWaveform()
{
}

PhysiologyWaveform::PhysiologyWaveform(
        const PhysiologyWaveform& x)
{
    m_educational_encounter = x.m_educational_encounter;
    m_simulation_time = x.m_simulation_time;
    m_timestamp = x.m_timestamp;
    m_name = x.m_name;
    m_unit = x.m_unit;
    m_value = x.m_value;
}

PhysiologyWaveform::PhysiologyWaveform(
        PhysiologyWaveform&& x) noexcept
{
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_simulation_time = x.m_simulation_time;
    m_timestamp = x.m_timestamp;
    m_name = std::move(x.m_name);
    m_unit = std::move(x.m_unit);
    m_value = x.m_value;
}

PhysiologyWaveform& PhysiologyWaveform::operator =(
        const PhysiologyWaveform& x)
{

    m_educational_encounter = x.m_educational_encounter;
    m_simulation_time = x.m_simulation_time;
    m_timestamp = x.m_timestamp;
    m_name = x.m_name;
    m_unit = x.m_unit;
    m_value = x.m_value;
    return *this;
}

PhysiologyWaveform& PhysiologyWaveform::operator =(
        PhysiologyWaveform&& x) noexcept
{

    m_educational_encounter = std::move(x.m_educational_encounter);
    m_simulation_time = x.m_simulation_time;
    m_timestamp = x.m_timestamp;
    m_name = std::move(x.m_name);
    m_unit = std::move(x.m_unit);
    m_value = x.m_value;
    return *this;
}

bool PhysiologyWaveform::operator ==(
        const PhysiologyWaveform& x) const
{
    return (m_educational_encounter == x.m_educational_encounter &&
           m_simulation_time == x.m_simulation_time &&
           m_timestamp == x.m_timestamp &&
           m_name == x.m_name &&
           m_unit == x.m_unit &&
           m_value == x.m_value);
}

bool PhysiologyWaveform::operator !=(
        const PhysiologyWaveform& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member educational_encounter
 * @param _educational_encounter New value to be copied in member educational_encounter
 */
void PhysiologyWaveform::educational_encounter(
        const AMM::UUID& _educational_encounter)
{
    m_educational_encounter = _educational_encounter;
}

/*!
 * @brief This function moves the value in member educational_encounter
 * @param _educational_encounter New value to be moved in member educational_encounter
 */
void PhysiologyWaveform::educational_encounter(
        AMM::UUID&& _educational_encounter)
{
    m_educational_encounter = std::move(_educational_encounter);
}

/*!
 * @brief This function returns a constant reference to member educational_encounter
 * @return Constant reference to member educational_encounter
 */
const AMM::UUID& PhysiologyWaveform::educational_encounter() const
{
    return m_educational_encounter;
}

/*!
 * @brief This function returns a reference to member educational_encounter
 * @return Reference to member educational_encounter
 */
AMM::UUID& PhysiologyWaveform::educational_encounter()
{
    return m_educational_encounter;
}


/*!
 * @brief This function sets a value in member simulation_time
 * @param _simulation_time New value for member simulation_time
 */
void PhysiologyWaveform::simulation_time(
        int64_t _simulation_time)
{
    m_simulation_time = _simulation_time;
}

/*!
 * @brief This function returns the value of member simulation_time
 * @return Value of member simulation_time
 */
int64_t PhysiologyWaveform::simulation_time() const
{
    return m_simulation_time;
}

/*!
 * @brief This function returns a reference to member simulation_time
 * @return Reference to member simulation_time
 */
int64_t& PhysiologyWaveform::simulation_time()
{
    return m_simulation_time;
}


/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void PhysiologyWaveform::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t PhysiologyWaveform::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& PhysiologyWaveform::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void PhysiologyWaveform::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void PhysiologyWaveform::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& PhysiologyWaveform::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& PhysiologyWaveform::name()
{
    return m_name;
}


/*!
 * @brief This function copies the value in member unit
 * @param _unit New value to be copied in member unit
 */
void PhysiologyWaveform::unit(
        const std::string& _unit)
{
    m_unit = _unit;
}

/*!
 * @brief This function moves the value in member unit
 * @param _unit New value to be moved in member unit
 */
void PhysiologyWaveform::unit(
        std::string&& _unit)
{
    m_unit = std::move(_unit);
}

/*!
 * @brief This function returns a constant reference to member unit
 * @return Constant reference to member unit
 */
const std::string& PhysiologyWaveform::unit() const
{
    return m_unit;
}

/*!
 * @brief This function returns a reference to member unit
 * @return Reference to member unit
 */
std::string& PhysiologyWaveform::unit()
{
    return m_unit;
}


/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void PhysiologyWaveform::value(
        double _value)
{
    m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
double PhysiologyWaveform::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
double& PhysiologyWaveform::value()
{
    return m_value;
}




RenderModification::RenderModification()
{
}

RenderModification::~RenderModification()
{
}

RenderModification::RenderModification(
        const RenderModification& x)
{
    m_id = x.m_id;
    m_event_id = x.m_event_id;
    m_type = x.m_type;
    m_data = x.m_data;
}

RenderModification::RenderModification(
        RenderModification&& x) noexcept
{
    m_id = std::move(x.m_id);
    m_event_id = std::move(x.m_event_id);
    m_type = std::move(x.m_type);
    m_data = std::move(x.m_data);
}

RenderModification& RenderModification::operator =(
        const RenderModification& x)
{

    m_id = x.m_id;
    m_event_id = x.m_event_id;
    m_type = x.m_type;
    m_data = x.m_data;
    return *this;
}

RenderModification& RenderModification::operator =(
        RenderModification&& x) noexcept
{

    m_id = std::move(x.m_id);
    m_event_id = std::move(x.m_event_id);
    m_type = std::move(x.m_type);
    m_data = std::move(x.m_data);
    return *this;
}

bool RenderModification::operator ==(
        const RenderModification& x) const
{
    return (m_id == x.m_id &&
           m_event_id == x.m_event_id &&
           m_type == x.m_type &&
           m_data == x.m_data);
}

bool RenderModification::operator !=(
        const RenderModification& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void RenderModification::id(
        const AMM::UUID& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void RenderModification::id(
        AMM::UUID&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const AMM::UUID& RenderModification::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
AMM::UUID& RenderModification::id()
{
    return m_id;
}


/*!
 * @brief This function copies the value in member event_id
 * @param _event_id New value to be copied in member event_id
 */
void RenderModification::event_id(
        const AMM::UUID& _event_id)
{
    m_event_id = _event_id;
}

/*!
 * @brief This function moves the value in member event_id
 * @param _event_id New value to be moved in member event_id
 */
void RenderModification::event_id(
        AMM::UUID&& _event_id)
{
    m_event_id = std::move(_event_id);
}

/*!
 * @brief This function returns a constant reference to member event_id
 * @return Constant reference to member event_id
 */
const AMM::UUID& RenderModification::event_id() const
{
    return m_event_id;
}

/*!
 * @brief This function returns a reference to member event_id
 * @return Reference to member event_id
 */
AMM::UUID& RenderModification::event_id()
{
    return m_event_id;
}


/*!
 * @brief This function copies the value in member type
 * @param _type New value to be copied in member type
 */
void RenderModification::type(
        const std::string& _type)
{
    m_type = _type;
}

/*!
 * @brief This function moves the value in member type
 * @param _type New value to be moved in member type
 */
void RenderModification::type(
        std::string&& _type)
{
    m_type = std::move(_type);
}

/*!
 * @brief This function returns a constant reference to member type
 * @return Constant reference to member type
 */
const std::string& RenderModification::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
std::string& RenderModification::type()
{
    return m_type;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void RenderModification::data(
        const eprosima::fastcdr::fixed_string<4096>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void RenderModification::data(
        eprosima::fastcdr::fixed_string<4096>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const eprosima::fastcdr::fixed_string<4096>& RenderModification::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
eprosima::fastcdr::fixed_string<4096>& RenderModification::data()
{
    return m_data;
}





SimulationControl::SimulationControl()
{
}

SimulationControl::~SimulationControl()
{
}

SimulationControl::SimulationControl(
        const SimulationControl& x)
{
    m_timestamp = x.m_timestamp;
    m_type = x.m_type;
    m_educational_encounter = x.m_educational_encounter;
}

SimulationControl::SimulationControl(
        SimulationControl&& x) noexcept
{
    m_timestamp = x.m_timestamp;
    m_type = x.m_type;
    m_educational_encounter = std::move(x.m_educational_encounter);
}

SimulationControl& SimulationControl::operator =(
        const SimulationControl& x)
{

    m_timestamp = x.m_timestamp;
    m_type = x.m_type;
    m_educational_encounter = x.m_educational_encounter;
    return *this;
}

SimulationControl& SimulationControl::operator =(
        SimulationControl&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_type = x.m_type;
    m_educational_encounter = std::move(x.m_educational_encounter);
    return *this;
}

bool SimulationControl::operator ==(
        const SimulationControl& x) const
{
    return (m_timestamp == x.m_timestamp &&
           m_type == x.m_type &&
           m_educational_encounter == x.m_educational_encounter);
}

bool SimulationControl::operator !=(
        const SimulationControl& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void SimulationControl::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t SimulationControl::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& SimulationControl::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void SimulationControl::type(
        AMM::ControlType _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
AMM::ControlType SimulationControl::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
AMM::ControlType& SimulationControl::type()
{
    return m_type;
}


/*!
 * @brief This function copies the value in member educational_encounter
 * @param _educational_encounter New value to be copied in member educational_encounter
 */
void SimulationControl::educational_encounter(
        const AMM::UUID& _educational_encounter)
{
    m_educational_encounter = _educational_encounter;
}

/*!
 * @brief This function moves the value in member educational_encounter
 * @param _educational_encounter New value to be moved in member educational_encounter
 */
void SimulationControl::educational_encounter(
        AMM::UUID&& _educational_encounter)
{
    m_educational_encounter = std::move(_educational_encounter);
}

/*!
 * @brief This function returns a constant reference to member educational_encounter
 * @return Constant reference to member educational_encounter
 */
const AMM::UUID& SimulationControl::educational_encounter() const
{
    return m_educational_encounter;
}

/*!
 * @brief This function returns a reference to member educational_encounter
 * @return Reference to member educational_encounter
 */
AMM::UUID& SimulationControl::educational_encounter()
{
    return m_educational_encounter;
}





Status::Status()
{
}

Status::~Status()
{
}

Status::Status(
        const Status& x)
{
    m_module_id = x.m_module_id;
    m_module_name = x.m_module_name;
    m_educational_encounter = x.m_educational_encounter;
    m_capability = x.m_capability;
    m_timestamp = x.m_timestamp;
    m_value = x.m_value;
    m_message = x.m_message;
}

Status::Status(
        Status&& x) noexcept
{
    m_module_id = std::move(x.m_module_id);
    m_module_name = std::move(x.m_module_name);
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_capability = std::move(x.m_capability);
    m_timestamp = x.m_timestamp;
    m_value = x.m_value;
    m_message = std::move(x.m_message);
}

Status& Status::operator =(
        const Status& x)
{

    m_module_id = x.m_module_id;
    m_module_name = x.m_module_name;
    m_educational_encounter = x.m_educational_encounter;
    m_capability = x.m_capability;
    m_timestamp = x.m_timestamp;
    m_value = x.m_value;
    m_message = x.m_message;
    return *this;
}

Status& Status::operator =(
        Status&& x) noexcept
{

    m_module_id = std::move(x.m_module_id);
    m_module_name = std::move(x.m_module_name);
    m_educational_encounter = std::move(x.m_educational_encounter);
    m_capability = std::move(x.m_capability);
    m_timestamp = x.m_timestamp;
    m_value = x.m_value;
    m_message = std::move(x.m_message);
    return *this;
}

bool Status::operator ==(
        const Status& x) const
{
    return (m_module_id == x.m_module_id &&
           m_module_name == x.m_module_name &&
           m_educational_encounter == x.m_educational_encounter &&
           m_capability == x.m_capability &&
           m_timestamp == x.m_timestamp &&
           m_value == x.m_value &&
           m_message == x.m_message);
}

bool Status::operator !=(
        const Status& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member module_id
 * @param _module_id New value to be copied in member module_id
 */
void Status::module_id(
        const AMM::UUID& _module_id)
{
    m_module_id = _module_id;
}

/*!
 * @brief This function moves the value in member module_id
 * @param _module_id New value to be moved in member module_id
 */
void Status::module_id(
        AMM::UUID&& _module_id)
{
    m_module_id = std::move(_module_id);
}

/*!
 * @brief This function returns a constant reference to member module_id
 * @return Constant reference to member module_id
 */
const AMM::UUID& Status::module_id() const
{
    return m_module_id;
}

/*!
 * @brief This function returns a reference to member module_id
 * @return Reference to member module_id
 */
AMM::UUID& Status::module_id()
{
    return m_module_id;
}


/*!
 * @brief This function copies the value in member module_name
 * @param _module_name New value to be copied in member module_name
 */
void Status::module_name(
        const std::string& _module_name)
{
    m_module_name = _module_name;
}

/*!
 * @brief This function moves the value in member module_name
 * @param _module_name New value to be moved in member module_name
 */
void Status::module_name(
        std::string&& _module_name)
{
    m_module_name = std::move(_module_name);
}

/*!
 * @brief This function returns a constant reference to member module_name
 * @return Constant reference to member module_name
 */
const std::string& Status::module_name() const
{
    return m_module_name;
}

/*!
 * @brief This function returns a reference to member module_name
 * @return Reference to member module_name
 */
std::string& Status::module_name()
{
    return m_module_name;
}


/*!
 * @brief This function copies the value in member educational_encounter
 * @param _educational_encounter New value to be copied in member educational_encounter
 */
void Status::educational_encounter(
        const AMM::UUID& _educational_encounter)
{
    m_educational_encounter = _educational_encounter;
}

/*!
 * @brief This function moves the value in member educational_encounter
 * @param _educational_encounter New value to be moved in member educational_encounter
 */
void Status::educational_encounter(
        AMM::UUID&& _educational_encounter)
{
    m_educational_encounter = std::move(_educational_encounter);
}

/*!
 * @brief This function returns a constant reference to member educational_encounter
 * @return Constant reference to member educational_encounter
 */
const AMM::UUID& Status::educational_encounter() const
{
    return m_educational_encounter;
}

/*!
 * @brief This function returns a reference to member educational_encounter
 * @return Reference to member educational_encounter
 */
AMM::UUID& Status::educational_encounter()
{
    return m_educational_encounter;
}


/*!
 * @brief This function copies the value in member capability
 * @param _capability New value to be copied in member capability
 */
void Status::capability(
        const std::string& _capability)
{
    m_capability = _capability;
}

/*!
 * @brief This function moves the value in member capability
 * @param _capability New value to be moved in member capability
 */
void Status::capability(
        std::string&& _capability)
{
    m_capability = std::move(_capability);
}

/*!
 * @brief This function returns a constant reference to member capability
 * @return Constant reference to member capability
 */
const std::string& Status::capability() const
{
    return m_capability;
}

/*!
 * @brief This function returns a reference to member capability
 * @return Reference to member capability
 */
std::string& Status::capability()
{
    return m_capability;
}


/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void Status::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t Status::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& Status::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void Status::value(
        AMM::StatusValue _value)
{
    m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
AMM::StatusValue Status::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
AMM::StatusValue& Status::value()
{
    return m_value;
}


/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void Status::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void Status::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& Status::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& Status::message()
{
    return m_message;
}




} // namespace AMM
// Include auxiliary functions like for serializing/deserializing.
#include "AMM_StandardCdrAux.ipp"

